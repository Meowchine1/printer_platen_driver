
printer_platen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097dc  080097dc  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080097dc  080097dc  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097dc  080097dc  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080097e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001334  20000184  08009968  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  08009968  000214b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155f2  00000000  00000000  000201f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a84  00000000  00000000  000357e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00039270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3a  00000000  00000000  0003a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ce9  00000000  00000000  0003b5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001840a  00000000  00000000  0005c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a11  00000000  00000000  000746bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051c8  00000000  00000000  001390d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0013e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800976c 	.word	0x0800976c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800976c 	.word	0x0800976c

08000218 <app_start>:
#include "app.h"

void app_start(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
		HAL_Delay(100);
 800021c:	2064      	movs	r0, #100	; 0x64
 800021e:	f000 fca3 	bl	8000b68 <HAL_Delay>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800022e:	4b12      	ldr	r3, [pc, #72]	; (8000278 <MX_DMA_Init+0x50>)
 8000230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000232:	4a11      	ldr	r2, [pc, #68]	; (8000278 <MX_DMA_Init+0x50>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6493      	str	r3, [r2, #72]	; 0x48
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_DMA_Init+0x50>)
 800023c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_DMA_Init+0x50>)
 8000248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800024a:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <MX_DMA_Init+0x50>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6493      	str	r3, [r2, #72]	; 0x48
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_DMA_Init+0x50>)
 8000254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	200b      	movs	r0, #11
 8000264:	f000 fd7d 	bl	8000d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000268:	200b      	movs	r0, #11
 800026a:	f000 fd94 	bl	8000d96 <HAL_NVIC_EnableIRQ>

}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000

0800027c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b08a      	sub	sp, #40	; 0x28
 8000280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <MX_GPIO_Init+0x114>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	4a3e      	ldr	r2, [pc, #248]	; (8000390 <MX_GPIO_Init+0x114>)
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029e:	4b3c      	ldr	r3, [pc, #240]	; (8000390 <MX_GPIO_Init+0x114>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	f003 0304 	and.w	r3, r3, #4
 80002a6:	613b      	str	r3, [r7, #16]
 80002a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002aa:	4b39      	ldr	r3, [pc, #228]	; (8000390 <MX_GPIO_Init+0x114>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	4a38      	ldr	r2, [pc, #224]	; (8000390 <MX_GPIO_Init+0x114>)
 80002b0:	f043 0320 	orr.w	r3, r3, #32
 80002b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b6:	4b36      	ldr	r3, [pc, #216]	; (8000390 <MX_GPIO_Init+0x114>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	f003 0320 	and.w	r3, r3, #32
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b33      	ldr	r3, [pc, #204]	; (8000390 <MX_GPIO_Init+0x114>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a32      	ldr	r2, [pc, #200]	; (8000390 <MX_GPIO_Init+0x114>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b30      	ldr	r3, [pc, #192]	; (8000390 <MX_GPIO_Init+0x114>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <MX_GPIO_Init+0x114>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4a2c      	ldr	r2, [pc, #176]	; (8000390 <MX_GPIO_Init+0x114>)
 80002e0:	f043 0302 	orr.w	r3, r3, #2
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e6:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <MX_GPIO_Init+0x114>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	f003 0302 	and.w	r3, r3, #2
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f8:	4826      	ldr	r0, [pc, #152]	; (8000394 <MX_GPIO_Init+0x118>)
 80002fa:	f001 f8a3 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_B_ENA_Pin|MOTOR_B_DIR_Pin|MOTOR_A_ENA_Pin|MOTOR_A_DIR_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2178      	movs	r1, #120	; 0x78
 8000302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000306:	f001 f89d 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAUSE_GPIO_Port, PAUSE_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2101      	movs	r1, #1
 800030e:	4822      	ldr	r0, [pc, #136]	; (8000398 <MX_GPIO_Init+0x11c>)
 8000310:	f001 f898 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2300      	movs	r3, #0
 8000324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	4819      	ldr	r0, [pc, #100]	; (8000394 <MX_GPIO_Init+0x118>)
 800032e:	f000 ff07 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_B_ENA_Pin|MOTOR_B_DIR_Pin|MOTOR_A_ENA_Pin|MOTOR_A_DIR_Pin;
 8000332:	2378      	movs	r3, #120	; 0x78
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2300      	movs	r3, #0
 8000340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f000 fef8 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PAUSE_Pin;
 8000350:	2301      	movs	r3, #1
 8000352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PAUSE_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	4619      	mov	r1, r3
 8000366:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_GPIO_Init+0x11c>)
 8000368:	f000 feea 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ENDER_BACKSTOP_Pin|BTN_PASS_Pin|BTN_IN_Pin|ENDER_PE_Pin
 800036c:	23f8      	movs	r3, #248	; 0xf8
 800036e:	617b      	str	r3, [r7, #20]
                          |ENDER_ASF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000370:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	4619      	mov	r1, r3
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_GPIO_Init+0x11c>)
 8000382:	f000 fedd 	bl	8001140 <HAL_GPIO_Init>

}
 8000386:	bf00      	nop
 8000388:	3728      	adds	r7, #40	; 0x28
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	48000800 	.word	0x48000800
 8000398:	48000400 	.word	0x48000400

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f000 fb71 	bl	8000a86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f80f 	bl	80003c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f7ff ff68 	bl	800027c <MX_GPIO_Init>
  MX_DMA_Init();
 80003ac:	f7ff ff3c 	bl	8000228 <MX_DMA_Init>
  MX_TIM2_Init();
 80003b0:	f000 f8ce 	bl	8000550 <MX_TIM2_Init>
  MX_TIM4_Init();
 80003b4:	f000 f920 	bl	80005f8 <MX_TIM4_Init>
  MX_TIM15_Init();
 80003b8:	f000 f996 	bl	80006e8 <MX_TIM15_Init>
  MX_USB_Device_Init();
 80003bc:	f008 fcc6 	bl	8008d4c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  app_start();
 80003c0:	f7ff ff2a 	bl	8000218 <app_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <main+0x28>

080003c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b094      	sub	sp, #80	; 0x50
 80003ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003cc:	f107 0318 	add.w	r3, r7, #24
 80003d0:	2238      	movs	r2, #56	; 0x38
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f009 f99d 	bl	8009714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f002 fd77 	bl	8002edc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003ee:	2321      	movs	r3, #33	; 0x21
 80003f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000400:	2303      	movs	r3, #3
 8000402:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000404:	2302      	movs	r3, #2
 8000406:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000408:	2355      	movs	r3, #85	; 0x55
 800040a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000410:	2304      	movs	r3, #4
 8000412:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000414:	2302      	movs	r3, #2
 8000416:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0318 	add.w	r3, r7, #24
 800041c:	4618      	mov	r0, r3
 800041e:	f002 fe11 	bl	8003044 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000428:	f000 f818 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2303      	movs	r3, #3
 8000432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2104      	movs	r1, #4
 8000444:	4618      	mov	r0, r3
 8000446:	f003 f90f 	bl	8003668 <HAL_RCC_ClockConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000450:	f000 f804 	bl	800045c <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3750      	adds	r7, #80	; 0x50
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	e7fe      	b.n	8000464 <Error_Handler+0x8>
	...

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_MspInit+0x44>)
 8000470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000472:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_MspInit+0x44>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6613      	str	r3, [r2, #96]	; 0x60
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_MspInit+0x44>)
 800047c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <HAL_MspInit+0x44>)
 8000488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <HAL_MspInit+0x44>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000490:	6593      	str	r3, [r2, #88]	; 0x58
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_MspInit+0x44>)
 8000494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800049e:	f002 fdc1 	bl	8003024 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <MemManage_Handler+0x4>

080004c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <UsageFault_Handler+0x4>

080004ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fc:	f000 fb16 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <DMA1_Channel1_IRQHandler+0x10>)
 800050a:	f000 fd07 	bl	8000f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000284 	.word	0x20000284

08000518 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <USB_LP_IRQHandler+0x10>)
 800051e:	f001 f899 	bl	8001654 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000fbc 	.word	0x20000fbc

0800052c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <SystemInit+0x20>)
 8000532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <SystemInit+0x20>)
 8000538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800053c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
DMA_HandleTypeDef hdma_tim2_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	2224      	movs	r2, #36	; 0x24
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f009 f8d8 	bl	8009714 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <MX_TIM2_Init+0xa4>)
 8000570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000574:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_TIM2_Init+0xa4>)
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_TIM2_Init+0xa4>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_TIM2_Init+0xa4>)
 8000584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000588:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_TIM2_Init+0xa4>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_TIM2_Init+0xa4>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000596:	2301      	movs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800059e:	2301      	movs	r3, #1
 80005a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005ae:	2301      	movs	r3, #1
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <MX_TIM2_Init+0xa4>)
 80005c2:	f003 fcdd 	bl	8003f80 <HAL_TIM_Encoder_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80005cc:	f7ff ff46 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_TIM2_Init+0xa4>)
 80005de:	f004 fb17 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80005e8:	f7ff ff38 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	3730      	adds	r7, #48	; 0x30
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200001a0 	.word	0x200001a0

080005f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08e      	sub	sp, #56	; 0x38
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_TIM4_Init+0xe8>)
 800062c:	4a2d      	ldr	r2, [pc, #180]	; (80006e4 <MX_TIM4_Init+0xec>)
 800062e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000630:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_TIM4_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_TIM4_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_TIM4_Init+0xe8>)
 800063e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000642:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_TIM4_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_TIM4_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000650:	4823      	ldr	r0, [pc, #140]	; (80006e0 <MX_TIM4_Init+0xe8>)
 8000652:	f003 fbdd 	bl	8003e10 <HAL_TIM_Base_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800065c:	f7ff fefe 	bl	800045c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066a:	4619      	mov	r1, r3
 800066c:	481c      	ldr	r0, [pc, #112]	; (80006e0 <MX_TIM4_Init+0xe8>)
 800066e:	f003 fda7 	bl	80041c0 <HAL_TIM_ConfigClockSource>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000678:	f7ff fef0 	bl	800045c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800067c:	4818      	ldr	r0, [pc, #96]	; (80006e0 <MX_TIM4_Init+0xe8>)
 800067e:	f003 fc1e 	bl	8003ebe <HAL_TIM_OC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000688:	f7ff fee8 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4811      	ldr	r0, [pc, #68]	; (80006e0 <MX_TIM4_Init+0xe8>)
 800069c:	f004 fab8 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80006a6:	f7ff fed9 	bl	800045c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	220c      	movs	r2, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <MX_TIM4_Init+0xe8>)
 80006c2:	f003 fd03 	bl	80040cc <HAL_TIM_OC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80006cc:	f7ff fec6 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <MX_TIM4_Init+0xe8>)
 80006d2:	f000 f951 	bl	8000978 <HAL_TIM_MspPostInit>

}
 80006d6:	bf00      	nop
 80006d8:	3738      	adds	r7, #56	; 0x38
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200001ec 	.word	0x200001ec
 80006e4:	40000800 	.word	0x40000800

080006e8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09c      	sub	sp, #112	; 0x70
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]
 800071a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f008 fff6 	bl	8009714 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000728:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <MX_TIM15_Init+0x140>)
 800072a:	4a40      	ldr	r2, [pc, #256]	; (800082c <MX_TIM15_Init+0x144>)
 800072c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800072e:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <MX_TIM15_Init+0x140>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <MX_TIM15_Init+0x140>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800073a:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <MX_TIM15_Init+0x140>)
 800073c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000740:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <MX_TIM15_Init+0x140>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000748:	4b37      	ldr	r3, [pc, #220]	; (8000828 <MX_TIM15_Init+0x140>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b36      	ldr	r3, [pc, #216]	; (8000828 <MX_TIM15_Init+0x140>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000754:	4834      	ldr	r0, [pc, #208]	; (8000828 <MX_TIM15_Init+0x140>)
 8000756:	f003 fb5b 	bl	8003e10 <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000760:	f7ff fe7c 	bl	800045c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800076a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800076e:	4619      	mov	r1, r3
 8000770:	482d      	ldr	r0, [pc, #180]	; (8000828 <MX_TIM15_Init+0x140>)
 8000772:	f003 fd25 	bl	80041c0 <HAL_TIM_ConfigClockSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800077c:	f7ff fe6e 	bl	800045c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8000780:	4829      	ldr	r0, [pc, #164]	; (8000828 <MX_TIM15_Init+0x140>)
 8000782:	f003 fb9c 	bl	8003ebe <HAL_TIM_OC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800078c:	f7ff fe66 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000798:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800079c:	4619      	mov	r1, r3
 800079e:	4822      	ldr	r0, [pc, #136]	; (8000828 <MX_TIM15_Init+0x140>)
 80007a0:	f004 fa36 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80007aa:	f7ff fe57 	bl	800045c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007ae:	2300      	movs	r3, #0
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b6:	2300      	movs	r3, #0
 80007b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ba:	2300      	movs	r3, #0
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <MX_TIM15_Init+0x140>)
 80007d4:	f003 fc7a 	bl	80040cc <HAL_TIM_OC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80007de:	f7ff fe3d 	bl	800045c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM15_Init+0x140>)
 800080a:	f004 fa83 	bl	8004d14 <HAL_TIMEx_ConfigBreakDeadTime>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8000814:	f7ff fe22 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM15_Init+0x140>)
 800081a:	f000 f8ad 	bl	8000978 <HAL_TIM_MspPostInit>

}
 800081e:	bf00      	nop
 8000820:	3770      	adds	r7, #112	; 0x70
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000238 	.word	0x20000238
 800082c:	40014000 	.word	0x40014000

08000830 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000850:	d153      	bne.n	80008fa <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000852:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	4a2b      	ldr	r2, [pc, #172]	; (8000904 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6593      	str	r3, [r2, #88]	; 0x58
 800085e:	4b29      	ldr	r3, [pc, #164]	; (8000904 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <HAL_TIM_Encoder_MspInit+0xd4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a25      	ldr	r2, [pc, #148]	; (8000904 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000882:	2303      	movs	r3, #3
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000892:	2301      	movs	r3, #1
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f000 fc4e 	bl	8001140 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel1;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <HAL_TIM_Encoder_MspInit+0xdc>)
 80008a8:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008ac:	223c      	movs	r2, #60	; 0x3c
 80008ae:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c8:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008d0:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008e0:	f000 fa74 	bl	8000dcc <HAL_DMA_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_TIM_Encoder_MspInit+0xbe>
    {
      Error_Handler();
 80008ea:	f7ff fdb7 	bl	800045c <Error_Handler>
    }

    __HAL_LINKDMA(tim_encoderHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a05      	ldr	r2, [pc, #20]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008f2:	621a      	str	r2, [r3, #32]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_TIM_Encoder_MspInit+0xd8>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	20000284 	.word	0x20000284
 800090c:	40020008 	.word	0x40020008

08000910 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <HAL_TIM_Base_MspInit+0x5c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d10c      	bne.n	800093c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_TIM_Base_MspInit+0x60>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <HAL_TIM_Base_MspInit+0x60>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6593      	str	r3, [r2, #88]	; 0x58
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_TIM_Base_MspInit+0x60>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800093a:	e010      	b.n	800095e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM15)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <HAL_TIM_Base_MspInit+0x64>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10b      	bne.n	800095e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_TIM_Base_MspInit+0x60>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <HAL_TIM_Base_MspInit+0x60>)
 800094c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_TIM_Base_MspInit+0x60>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40000800 	.word	0x40000800
 8000970:	40021000 	.word	0x40021000
 8000974:	40014000 	.word	0x40014000

08000978 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <HAL_TIM_MspPostInit+0xac>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d11d      	bne.n	80009d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <HAL_TIM_MspPostInit+0xb0>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a22      	ldr	r2, [pc, #136]	; (8000a28 <HAL_TIM_MspPostInit+0xb0>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_TIM_MspPostInit+0xb0>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_A_STEP_Pin;
 80009b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009c4:	2302      	movs	r3, #2
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_A_STEP_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <HAL_TIM_MspPostInit+0xb4>)
 80009d0:	f000 fbb6 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80009d4:	e021      	b.n	8000a1a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <HAL_TIM_MspPostInit+0xb8>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d11c      	bne.n	8000a1a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_TIM_MspPostInit+0xb0>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e4:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_TIM_MspPostInit+0xb0>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_TIM_MspPostInit+0xb0>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_B_STEP_Pin;
 80009f8:	2304      	movs	r3, #4
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_B_STEP_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f000 fb93 	bl	8001140 <HAL_GPIO_Init>
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40000800 	.word	0x40000800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000400 	.word	0x48000400
 8000a30:	40014000 	.word	0x40014000

08000a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f7ff fd78 	bl	800052c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	; (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f008 fe5f 	bl	8009724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a66:	f7ff fc99 	bl	800039c <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   r0, =_estack
 8000a6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000a78:	080097e4 	.word	0x080097e4
  ldr r2, =_sbss
 8000a7c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000a80:	200014b8 	.word	0x200014b8

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>

08000a86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f95b 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a96:	200f      	movs	r0, #15
 8000a98:	f000 f80e 	bl	8000ab8 <HAL_InitTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e001      	b.n	8000aac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa8:	f7ff fcde 	bl	8000468 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aac:	79fb      	ldrb	r3, [r7, #7]

}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_InitTick+0x68>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d022      	beq.n	8000b12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_InitTick+0x6c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_InitTick+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f966 	bl	8000db2 <HAL_SYSTICK_Config>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10f      	bne.n	8000b0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d809      	bhi.n	8000b06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af2:	2200      	movs	r2, #0
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afa:	f000 f932 	bl	8000d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0x70>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e007      	b.n	8000b16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	e004      	b.n	8000b16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e001      	b.n	8000b16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x20>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b3c:	6013      	str	r3, [r2, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	200002e4 	.word	0x200002e4
 8000b4c:	20000008 	.word	0x20000008

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200002e4 	.word	0x200002e4

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff ffee 	bl	8000b50 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b80:	d004      	beq.n	8000b8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_Delay+0x40>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4413      	add	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8c:	bf00      	nop
 8000b8e:	f7ff ffdf 	bl	8000b50 <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d8f7      	bhi.n	8000b8e <HAL_Delay+0x26>
  {
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff29 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff40 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ff90 	bl	8000ca0 <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff5f 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff33 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffa4 	bl	8000d08 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e08d      	b.n	8000efa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_DMA_Init+0x138>)
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d80f      	bhi.n	8000e0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <HAL_DMA_Init+0x13c>)
 8000df2:	4413      	add	r3, r2
 8000df4:	4a45      	ldr	r2, [pc, #276]	; (8000f0c <HAL_DMA_Init+0x140>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	009a      	lsls	r2, r3, #2
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a42      	ldr	r2, [pc, #264]	; (8000f10 <HAL_DMA_Init+0x144>)
 8000e06:	641a      	str	r2, [r3, #64]	; 0x40
 8000e08:	e00e      	b.n	8000e28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <HAL_DMA_Init+0x148>)
 8000e12:	4413      	add	r3, r2
 8000e14:	4a3d      	ldr	r2, [pc, #244]	; (8000f0c <HAL_DMA_Init+0x140>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	009a      	lsls	r2, r3, #2
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a3c      	ldr	r2, [pc, #240]	; (8000f18 <HAL_DMA_Init+0x14c>)
 8000e26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 f8fe 	bl	800107c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e88:	d102      	bne.n	8000e90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ea4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d010      	beq.n	8000ed0 <HAL_DMA_Init+0x104>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d80c      	bhi.n	8000ed0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f91e 	bl	80010f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	e008      	b.n	8000ee2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020407 	.word	0x40020407
 8000f08:	bffdfff8 	.word	0xbffdfff8
 8000f0c:	cccccccd 	.word	0xcccccccd
 8000f10:	40020000 	.word	0x40020000
 8000f14:	bffdfbf8 	.word	0xbffdfbf8
 8000f18:	40020400 	.word	0x40020400

08000f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d026      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x7a>
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d021      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0320 	and.w	r3, r3, #32
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d107      	bne.n	8000f70 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0204 	bic.w	r2, r2, #4
 8000f6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d071      	beq.n	8001070 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f94:	e06c      	b.n	8001070 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d02e      	beq.n	8001008 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d029      	beq.n	8001008 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0320 	and.w	r3, r3, #32
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10b      	bne.n	8000fda <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 020a 	bic.w	r2, r2, #10
 8000fd0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 021f 	and.w	r2, r3, #31
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d038      	beq.n	8001070 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001006:	e033      	b.n	8001070 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	2208      	movs	r2, #8
 8001012:	409a      	lsls	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d02a      	beq.n	8001072 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d025      	beq.n	8001072 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 020e 	bic.w	r2, r2, #14
 8001034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f003 021f 	and.w	r2, r3, #31
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001070:	bf00      	nop
 8001072:	bf00      	nop
}
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800108c:	429a      	cmp	r2, r3
 800108e:	d802      	bhi.n	8001096 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e001      	b.n	800109a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001098:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3b08      	subs	r3, #8
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	009a      	lsls	r2, r3, #2
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4413      	add	r3, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80010c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2201      	movs	r2, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80010d6:	bf00      	nop
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40020407 	.word	0x40020407
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020820 	.word	0x40020820
 80010f0:	cccccccd 	.word	0xcccccccd
 80010f4:	40020880 	.word	0x40020880

080010f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	461a      	mov	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800111a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3b01      	subs	r3, #1
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	2201      	movs	r2, #1
 8001126:	409a      	lsls	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	1000823f 	.word	0x1000823f
 800113c:	40020940 	.word	0x40020940

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800114e:	e15a      	b.n	8001406 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 814c 	beq.w	8001400 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d005      	beq.n	8001180 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800117c:	2b02      	cmp	r3, #2
 800117e:	d130      	bne.n	80011e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b6:	2201      	movs	r2, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	f003 0201 	and.w	r2, r3, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d017      	beq.n	800121e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d123      	bne.n	8001272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0203 	and.w	r2, r3, #3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80a6 	beq.w	8001400 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	4a5a      	ldr	r2, [pc, #360]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6613      	str	r3, [r2, #96]	; 0x60
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012cc:	4a56      	ldr	r2, [pc, #344]	; (8001428 <HAL_GPIO_Init+0x2e8>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f6:	d01f      	beq.n	8001338 <HAL_GPIO_Init+0x1f8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x2ec>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d019      	beq.n	8001334 <HAL_GPIO_Init+0x1f4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d013      	beq.n	8001330 <HAL_GPIO_Init+0x1f0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_GPIO_Init+0x2f4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d00d      	beq.n	800132c <HAL_GPIO_Init+0x1ec>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x2f8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x1e8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2fc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_GPIO_Init+0x1e4>
 8001320:	2305      	movs	r3, #5
 8001322:	e00a      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001324:	2306      	movs	r3, #6
 8001326:	e008      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001328:	2304      	movs	r3, #4
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 800132c:	2303      	movs	r3, #3
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x1fa>
 8001338:	2300      	movs	r3, #0
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134a:	4937      	ldr	r1, [pc, #220]	; (8001428 <HAL_GPIO_Init+0x2e8>)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_GPIO_Init+0x300>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800137c:	4a30      	ldr	r2, [pc, #192]	; (8001440 <HAL_GPIO_Init+0x300>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_GPIO_Init+0x300>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013a6:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f ae9d 	bne.w	8001150 <HAL_GPIO_Init+0x10>
  }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800
 8001434:	48000c00 	.word	0x48000c00
 8001438:	48001000 	.word	0x48001000
 800143c:	48001400 	.word	0x48001400
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001460:	e002      	b.n	8001468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0c0      	b.n	8001608 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f007 fe36 	bl	800910c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2203      	movs	r2, #3
 80014a4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 fcd4 	bl	8004e5a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e03e      	b.n	8001536 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	3311      	adds	r3, #17
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	3310      	adds	r3, #16
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	3313      	adds	r3, #19
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	3320      	adds	r3, #32
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	3324      	adds	r3, #36	; 0x24
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	3301      	adds	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	791b      	ldrb	r3, [r3, #4]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3bb      	bcc.n	80014b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e044      	b.n	80015d0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	3301      	adds	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	791b      	ldrb	r3, [r3, #4]
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3b5      	bcc.n	8001546 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015e6:	f003 fc53 	bl	8004e90 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7a9b      	ldrb	r3, [r3, #10]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d102      	bne.n	8001606 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f001 fc41 	bl	8002e88 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_PCD_Start+0x16>
 8001622:	2302      	movs	r3, #2
 8001624:	e012      	b.n	800164c <HAL_PCD_Start+0x3c>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fbfa 	bl	8004e2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f005 feba 	bl	80073b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f005 febf 	bl	80073e4 <USB_ReadInterrupts>
 8001666:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fb04 	bl	8001c80 <PCD_EP_ISR_Handler>

    return;
 8001678:	e110      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001696:	b292      	uxth	r2, r2
 8001698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f007 fdc6 	bl	800922e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f8fc 	bl	80018a2 <HAL_PCD_SetAddress>

    return;
 80016aa:	e0f7      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00c      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016c8:	b292      	uxth	r2, r2
 80016ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016ce:	e0e5      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00c      	beq.n	80016f4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ec:	b292      	uxth	r2, r2
 80016ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016f2:	e0d3      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d034      	beq.n	8001768 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0204 	bic.w	r2, r2, #4
 8001710:	b292      	uxth	r2, r2
 8001712:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0208 	bic.w	r2, r2, #8
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001734:	2b01      	cmp	r3, #1
 8001736:	d107      	bne.n	8001748 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001740:	2100      	movs	r1, #0
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f007 ff66 	bl	8009614 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f007 fda9 	bl	80092a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001756:	b29a      	uxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001760:	b292      	uxth	r2, r2
 8001762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001766:	e099      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176e:	2b00      	cmp	r3, #0
 8001770:	d027      	beq.n	80017c2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0208 	orr.w	r2, r2, #8
 8001784:	b292      	uxth	r2, r2
 8001786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001792:	b29a      	uxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179c:	b292      	uxth	r2, r2
 800179e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0204 	orr.w	r2, r2, #4
 80017b4:	b292      	uxth	r2, r2
 80017b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f007 fd56 	bl	800926c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017c0:	e06c      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d040      	beq.n	800184e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017de:	b292      	uxth	r2, r2
 80017e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d12b      	bne.n	8001846 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0204 	orr.w	r2, r2, #4
 8001800:	b292      	uxth	r2, r2
 8001802:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0208 	orr.w	r2, r2, #8
 8001818:	b292      	uxth	r2, r2
 800181a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800182e:	b29b      	uxth	r3, r3
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800183c:	2101      	movs	r1, #1
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f007 fee8 	bl	8009614 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001844:	e02a      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f007 fd10 	bl	800926c <HAL_PCD_SuspendCallback>
    return;
 800184c:	e026      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00f      	beq.n	8001878 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001860:	b29a      	uxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800186a:	b292      	uxth	r2, r2
 800186c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f007 fcce 	bl	8009212 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001876:	e011      	b.n	800189c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00c      	beq.n	800189c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001894:	b292      	uxth	r2, r2
 8001896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800189a:	bf00      	nop
  }
}
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_PCD_SetAddress+0x1a>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e012      	b.n	80018e2 <HAL_PCD_SetAddress+0x40>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f005 fd5b 	bl	800738e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	4608      	mov	r0, r1
 80018f4:	4611      	mov	r1, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	70fb      	strb	r3, [r7, #3]
 80018fc:	460b      	mov	r3, r1
 80018fe:	803b      	strh	r3, [r7, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800190c:	2b00      	cmp	r3, #0
 800190e:	da0e      	bge.n	800192e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	f003 0207 	and.w	r2, r3, #7
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	3310      	adds	r3, #16
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	705a      	strb	r2, [r3, #1]
 800192c:	e00e      	b.n	800194c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	f003 0207 	and.w	r2, r3, #7
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	b2da      	uxtb	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001958:	883a      	ldrh	r2, [r7, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	78ba      	ldrb	r2, [r7, #2]
 8001962:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001964:	78bb      	ldrb	r3, [r7, #2]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d102      	bne.n	8001970 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_PCD_EP_Open+0x94>
 800197a:	2302      	movs	r3, #2
 800197c:	e00e      	b.n	800199c <HAL_PCD_EP_Open+0xb2>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68f9      	ldr	r1, [r7, #12]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fa9d 	bl	8004ecc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800199a:	7afb      	ldrb	r3, [r7, #11]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	da0e      	bge.n	80019d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	f003 0207 	and.w	r2, r3, #7
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	3310      	adds	r3, #16
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	705a      	strb	r2, [r3, #1]
 80019d4:	e00e      	b.n	80019f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	f003 0207 	and.w	r2, r3, #7
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_PCD_EP_Close+0x6a>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e00e      	b.n	8001a2c <HAL_PCD_EP_Close+0x88>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fe19 	bl	8005654 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	460b      	mov	r3, r1
 8001a42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a44:	7afb      	ldrb	r3, [r7, #11]
 8001a46:	f003 0207 	and.w	r2, r3, #7
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2200      	movs	r2, #0
 8001a72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6979      	ldr	r1, [r7, #20]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 ffd1 	bl	8005a2e <USB_EPStartXfer>

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	f003 0207 	and.w	r2, r3, #7
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001ab8:	681b      	ldr	r3, [r3, #0]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	f003 0207 	and.w	r2, r3, #7
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	3310      	adds	r3, #16
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6979      	ldr	r1, [r7, #20]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 ff82 	bl	8005a2e <USB_EPStartXfer>

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	7912      	ldrb	r2, [r2, #4]
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e03e      	b.n	8001bd0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da0e      	bge.n	8001b78 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	f003 0207 	and.w	r2, r3, #7
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	3310      	adds	r3, #16
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	705a      	strb	r2, [r3, #1]
 8001b76:	e00c      	b.n	8001b92 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_PCD_EP_SetStall+0x7e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e00e      	b.n	8001bd0 <HAL_PCD_EP_SetStall+0x9c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68f9      	ldr	r1, [r7, #12]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f005 fae5 	bl	8007190 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	7912      	ldrb	r2, [r2, #4]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e040      	b.n	8001c78 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0e      	bge.n	8001c1c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 0207 	and.w	r2, r3, #7
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	3310      	adds	r3, #16
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	705a      	strb	r2, [r3, #1]
 8001c1a:	e00e      	b.n	8001c3a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_EP_ClrStall+0x82>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e00e      	b.n	8001c78 <HAL_PCD_EP_ClrStall+0xa0>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68f9      	ldr	r1, [r7, #12]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 fae2 	bl	8007232 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b096      	sub	sp, #88	; 0x58
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c88:	e3ae      	b.n	80023e8 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001ca4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 8170 	bne.w	8001f8e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001cae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d14d      	bne.n	8001d56 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cca:	81fb      	strh	r3, [r7, #14]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	89fb      	ldrh	r3, [r7, #14]
 8001cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3310      	adds	r3, #16
 8001ce2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	441a      	add	r2, r3
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f007 fa5e 	bl	80091de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7b1b      	ldrb	r3, [r3, #12]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 835d 	beq.w	80023e8 <PCD_EP_ISR_Handler+0x768>
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 8358 	bne.w	80023e8 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7b1b      	ldrb	r3, [r3, #12]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	731a      	strb	r2, [r3, #12]
 8001d54:	e348      	b.n	80023e8 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001d5c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d032      	beq.n	8001dda <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f005 fb6a 	bl	8007488 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	823b      	strh	r3, [r7, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	8a3a      	ldrh	r2, [r7, #16]
 8001dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f007 f9d6 	bl	8009184 <HAL_PCD_SetupStageCallback>
 8001dd8:	e306      	b.n	80023e8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dda:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f280 8302 	bge.w	80023e8 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001df0:	4013      	ands	r3, r2
 8001df2:	83fb      	strh	r3, [r7, #30]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	8bfa      	ldrh	r2, [r7, #30]
 8001dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e28:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d019      	beq.n	8001e66 <PCD_EP_ISR_Handler+0x1e6>
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e40:	6959      	ldr	r1, [r3, #20]
 8001e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e44:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f005 fb1c 	bl	8007488 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	441a      	add	r2, r3
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f007 f9a1 	bl	80091a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 82b5 	bne.w	80023e8 <PCD_EP_ISR_Handler+0x768>
 8001e7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e8a:	f000 82ad 	beq.w	80023e8 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8001ec4:	d91d      	bls.n	8001f02 <PCD_EP_ISR_Handler+0x282>
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <PCD_EP_ISR_Handler+0x260>
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	3b01      	subs	r3, #1
 8001ede:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	029b      	lsls	r3, r3, #10
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	e026      	b.n	8001f50 <PCD_EP_ISR_Handler+0x2d0>
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <PCD_EP_ISR_Handler+0x2a0>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e017      	b.n	8001f50 <PCD_EP_ISR_Handler+0x2d0>
 8001f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	647b      	str	r3, [r7, #68]	; 0x44
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <PCD_EP_ISR_Handler+0x2ba>
 8001f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f36:	3301      	adds	r3, #1
 8001f38:	647b      	str	r3, [r7, #68]	; 0x44
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	029b      	lsls	r3, r3, #10
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f60:	827b      	strh	r3, [r7, #18]
 8001f62:	8a7b      	ldrh	r3, [r7, #18]
 8001f64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f68:	827b      	strh	r3, [r7, #18]
 8001f6a:	8a7b      	ldrh	r3, [r7, #18]
 8001f6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f70:	827b      	strh	r3, [r7, #18]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	8a7b      	ldrh	r3, [r7, #18]
 8001f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	8013      	strh	r3, [r2, #0]
 8001f8c:	e22c      	b.n	80023e8 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fa2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f280 80f6 	bge.w	8002198 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fe2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	7b1b      	ldrb	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d123      	bne.n	8002048 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	4413      	add	r3, r2
 800201a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002024:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002028:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 808e 	beq.w	800214e <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	6959      	ldr	r1, [r3, #20]
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	88da      	ldrh	r2, [r3, #6]
 800203e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002042:	f005 fa21 	bl	8007488 <USB_ReadPMA>
 8002046:	e082      	b.n	800214e <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	78db      	ldrb	r3, [r3, #3]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d10a      	bne.n	8002066 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002050:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002054:	461a      	mov	r2, r3
 8002056:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f9d3 	bl	8002404 <HAL_PCD_EP_DB_Receive>
 800205e:	4603      	mov	r3, r0
 8002060:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002064:	e073      	b.n	800214e <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800207c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002080:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800209a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800209e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d022      	beq.n	800210a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80020ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d02c      	beq.n	800214e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fa:	6959      	ldr	r1, [r3, #20]
 80020fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fe:	891a      	ldrh	r2, [r3, #8]
 8002100:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002104:	f005 f9c0 	bl	8007488 <USB_ReadPMA>
 8002108:	e021      	b.n	800214e <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	4413      	add	r3, r2
 8002124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002132:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002140:	6959      	ldr	r1, [r3, #20]
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002144:	895a      	ldrh	r2, [r3, #10]
 8002146:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800214a:	f005 f99d 	bl	8007488 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800214e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002156:	441a      	add	r2, r3
 8002158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800215c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002164:	441a      	add	r2, r3
 8002166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002168:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800216a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <PCD_EP_ISR_Handler+0x4fe>
 8002172:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	429a      	cmp	r2, r3
 800217c:	d206      	bcs.n	800218c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800217e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f007 f80f 	bl	80091a8 <HAL_PCD_DataOutStageCallback>
 800218a:	e005      	b.n	8002198 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fc4b 	bl	8005a2e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002198:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8121 	beq.w	80023e8 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80021a6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	3310      	adds	r3, #16
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80021ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80021f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f8:	78db      	ldrb	r3, [r3, #3]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	f040 80a2 	bne.w	8002344 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002208:	7b1b      	ldrb	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8093 	beq.w	8002336 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002210:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d046      	beq.n	80022aa <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800221c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d126      	bne.n	8002272 <PCD_EP_ISR_Handler+0x5f2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	4413      	add	r3, r2
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	00da      	lsls	r2, r3, #3
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	4413      	add	r3, r2
 8002246:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800224a:	623b      	str	r3, [r7, #32]
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002256:	b29a      	uxth	r2, r3
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226a:	b29a      	uxth	r2, r3
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	e061      	b.n	8002336 <PCD_EP_ISR_Handler+0x6b6>
 8002272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d15d      	bne.n	8002336 <PCD_EP_ISR_Handler+0x6b6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002288:	b29b      	uxth	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	4413      	add	r3, r2
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00da      	lsls	r2, r3, #3
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	4413      	add	r3, r2
 800229c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	2200      	movs	r2, #0
 80022a6:	801a      	strh	r2, [r3, #0]
 80022a8:	e045      	b.n	8002336 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d126      	bne.n	8002306 <PCD_EP_ISR_Handler+0x686>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022cc:	4413      	add	r3, r2
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
 80022d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	00da      	lsls	r2, r3, #3
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	4413      	add	r3, r2
 80022da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	801a      	strh	r2, [r3, #0]
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022fe:	b29a      	uxth	r2, r3
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	e017      	b.n	8002336 <PCD_EP_ISR_Handler+0x6b6>
 8002306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d113      	bne.n	8002336 <PCD_EP_ISR_Handler+0x6b6>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231c:	4413      	add	r3, r2
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	00da      	lsls	r2, r3, #3
 8002326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002328:	4413      	add	r3, r2
 800232a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002332:	2200      	movs	r2, #0
 8002334:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f006 ff4e 	bl	80091de <HAL_PCD_DataInStageCallback>
 8002342:	e051      	b.n	80023e8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002344:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d144      	bne.n	80023da <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	4413      	add	r3, r2
 800236a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002374:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002380:	429a      	cmp	r2, r3
 8002382:	d907      	bls.n	8002394 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800238c:	1ad2      	subs	r2, r2, r3
 800238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002390:	619a      	str	r2, [r3, #24]
 8002392:	e002      	b.n	800239a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f006 ff18 	bl	80091de <HAL_PCD_DataInStageCallback>
 80023ae:	e01b      	b.n	80023e8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80023b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023b8:	441a      	add	r2, r3
 80023ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023bc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80023be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023c6:	441a      	add	r2, r3
 80023c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fb2b 	bl	8005a2e <USB_EPStartXfer>
 80023d8:	e006      	b.n	80023e8 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023de:	461a      	mov	r2, r3
 80023e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f917 	bl	8002616 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f6ff ac48 	blt.w	8001c8a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3758      	adds	r7, #88	; 0x58
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d07c      	beq.n	8002516 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4413      	add	r3, r2
 8002436:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002440:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	8b7b      	ldrh	r3, [r7, #26]
 8002448:	429a      	cmp	r2, r3
 800244a:	d306      	bcc.n	800245a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	8b7b      	ldrh	r3, [r7, #26]
 8002452:	1ad2      	subs	r2, r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	619a      	str	r2, [r3, #24]
 8002458:	e002      	b.n	8002460 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d123      	bne.n	80024b0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	833b      	strh	r3, [r7, #24]
 8002484:	8b3b      	ldrh	r3, [r7, #24]
 8002486:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800248a:	833b      	strh	r3, [r7, #24]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	8b3b      	ldrh	r3, [r7, #24]
 800249c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01f      	beq.n	80024fa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d4:	82fb      	strh	r3, [r7, #22]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	441a      	add	r2, r3
 80024e4:	8afb      	ldrh	r3, [r7, #22]
 80024e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024fa:	8b7b      	ldrh	r3, [r7, #26]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8085 	beq.w	800260c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6959      	ldr	r1, [r3, #20]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	891a      	ldrh	r2, [r3, #8]
 800250e:	8b7b      	ldrh	r3, [r7, #26]
 8002510:	f004 ffba 	bl	8007488 <USB_ReadPMA>
 8002514:	e07a      	b.n	800260c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251e:	b29b      	uxth	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	4413      	add	r3, r2
 8002530:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800253a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	8b7b      	ldrh	r3, [r7, #26]
 8002542:	429a      	cmp	r2, r3
 8002544:	d306      	bcc.n	8002554 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	8b7b      	ldrh	r3, [r7, #26]
 800254c:	1ad2      	subs	r2, r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	619a      	str	r2, [r3, #24]
 8002552:	e002      	b.n	800255a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d123      	bne.n	80025aa <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257c:	83fb      	strh	r3, [r7, #30]
 800257e:	8bfb      	ldrh	r3, [r7, #30]
 8002580:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002584:	83fb      	strh	r3, [r7, #30]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	441a      	add	r2, r3
 8002594:	8bfb      	ldrh	r3, [r7, #30]
 8002596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800259e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11f      	bne.n	80025f4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ce:	83bb      	strh	r3, [r7, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	441a      	add	r2, r3
 80025de:	8bbb      	ldrh	r3, [r7, #28]
 80025e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025f4:	8b7b      	ldrh	r3, [r7, #26]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6959      	ldr	r1, [r3, #20]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	895a      	ldrh	r2, [r3, #10]
 8002606:	8b7b      	ldrh	r3, [r7, #26]
 8002608:	f004 ff3e 	bl	8007488 <USB_ReadPMA>
    }
  }

  return count;
 800260c:	8b7b      	ldrh	r3, [r7, #26]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b0a4      	sub	sp, #144	; 0x90
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	4613      	mov	r3, r2
 8002622:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 81db 	beq.w	80029e6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002638:	b29b      	uxth	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4413      	add	r3, r2
 800264a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002654:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002660:	429a      	cmp	r2, r3
 8002662:	d907      	bls.n	8002674 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800266c:	1ad2      	subs	r2, r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	619a      	str	r2, [r3, #24]
 8002672:	e002      	b.n	800267a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80b9 	bne.w	80027f6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d126      	bne.n	80026da <HAL_PCD_EP_DB_Transmit+0xc4>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	4413      	add	r3, r2
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	00da      	lsls	r2, r3, #3
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	4413      	add	r3, r2
 80026ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026be:	b29a      	uxth	r2, r3
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	801a      	strh	r2, [r3, #0]
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	e01a      	b.n	8002710 <HAL_PCD_EP_DB_Transmit+0xfa>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	785b      	ldrb	r3, [r3, #1]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d116      	bne.n	8002710 <HAL_PCD_EP_DB_Transmit+0xfa>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	4413      	add	r3, r2
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	00da      	lsls	r2, r3, #3
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	4413      	add	r3, r2
 8002704:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	2200      	movs	r2, #0
 800270e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d126      	bne.n	800276c <HAL_PCD_EP_DB_Transmit+0x156>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272c:	b29b      	uxth	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	00da      	lsls	r2, r3, #3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002750:	b29a      	uxth	r2, r3
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	801a      	strh	r2, [r3, #0]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002764:	b29a      	uxth	r2, r3
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	e017      	b.n	800279c <HAL_PCD_EP_DB_Transmit+0x186>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d113      	bne.n	800279c <HAL_PCD_EP_DB_Transmit+0x186>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277c:	b29b      	uxth	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	4413      	add	r3, r2
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	00da      	lsls	r2, r3, #3
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	4413      	add	r3, r2
 8002790:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2200      	movs	r2, #0
 800279a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f006 fd1b 	bl	80091de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 82fa 	beq.w	8002da8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	82fb      	strh	r3, [r7, #22]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	8afb      	ldrh	r3, [r7, #22]
 80027e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]
 80027f4:	e2d8      	b.n	8002da8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d021      	beq.n	8002844 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	441a      	add	r2, r3
 800282c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002840:	b29b      	uxth	r3, r3
 8002842:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800284a:	2b01      	cmp	r3, #1
 800284c:	f040 82ac 	bne.w	8002da8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002858:	441a      	add	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002866:	441a      	add	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d30b      	bcc.n	8002890 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002888:	1ad2      	subs	r2, r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	621a      	str	r2, [r3, #32]
 800288e:	e017      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d108      	bne.n	80028aa <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002898:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800289c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028a8:	e00a      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d165      	bne.n	8002994 <HAL_PCD_EP_DB_Transmit+0x37e>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028dc:	4413      	add	r3, r2
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	00da      	lsls	r2, r3, #3
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002904:	2b3e      	cmp	r3, #62	; 0x3e
 8002906:	d91d      	bls.n	8002944 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <HAL_PCD_EP_DB_Transmit+0x30c>
 800291c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800291e:	3b01      	subs	r3, #1
 8002920:	64bb      	str	r3, [r7, #72]	; 0x48
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29a      	uxth	r2, r3
 8002928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292a:	b29b      	uxth	r3, r3
 800292c:	029b      	lsls	r3, r3, #10
 800292e:	b29b      	uxth	r3, r3
 8002930:	4313      	orrs	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293c:	b29a      	uxth	r2, r3
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	e044      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0x34c>
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800295a:	b29a      	uxth	r2, r3
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	e035      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
 800296a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_PCD_EP_DB_Transmit+0x366>
 8002976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002978:	3301      	adds	r3, #1
 800297a:	64bb      	str	r3, [r7, #72]	; 0x48
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b29a      	uxth	r2, r3
 8002982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002984:	b29b      	uxth	r3, r3
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	b29b      	uxth	r3, r3
 800298a:	4313      	orrs	r3, r2
 800298c:	b29a      	uxth	r2, r3
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	e01c      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d118      	bne.n	80029ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	647b      	str	r3, [r7, #68]	; 0x44
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b0:	4413      	add	r3, r2
 80029b2:	647b      	str	r3, [r7, #68]	; 0x44
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	00da      	lsls	r2, r3, #3
 80029ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029bc:	4413      	add	r3, r2
 80029be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40
 80029c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6959      	ldr	r1, [r3, #20]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	891a      	ldrh	r2, [r3, #8]
 80029da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f004 fd10 	bl	8007404 <USB_WritePMA>
 80029e4:	e1e0      	b.n	8002da8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d307      	bcc.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a22:	1ad2      	subs	r2, r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	619a      	str	r2, [r3, #24]
 8002a28:	e002      	b.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 80c0 	bne.w	8002bba <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	785b      	ldrb	r3, [r3, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d126      	bne.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a56:	4413      	add	r3, r2
 8002a58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	00da      	lsls	r2, r3, #3
 8002a60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a62:	4413      	add	r3, r2
 8002a64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8c:	801a      	strh	r2, [r3, #0]
 8002a8e:	e01a      	b.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d116      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aac:	4413      	add	r3, r2
 8002aae:	667b      	str	r3, [r7, #100]	; 0x64
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	00da      	lsls	r2, r3, #3
 8002ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab8:	4413      	add	r3, r2
 8002aba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002abe:	663b      	str	r3, [r7, #96]	; 0x60
 8002ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	677b      	str	r3, [r7, #116]	; 0x74
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d12b      	bne.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x516>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae8:	4413      	add	r3, r2
 8002aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	00da      	lsls	r2, r3, #3
 8002af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af4:	4413      	add	r3, r2
 8002af6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002afa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b28:	801a      	strh	r2, [r3, #0]
 8002b2a:	e017      	b.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x546>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d113      	bne.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x546>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b42:	4413      	add	r3, r2
 8002b44:	677b      	str	r3, [r7, #116]	; 0x74
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	00da      	lsls	r2, r3, #3
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4e:	4413      	add	r3, r2
 8002b50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b54:	673b      	str	r3, [r7, #112]	; 0x70
 8002b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b58:	2200      	movs	r2, #0
 8002b5a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f006 fb3b 	bl	80091de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 811a 	bne.w	8002da8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	8013      	strh	r3, [r2, #0]
 8002bb8:	e0f6      	b.n	8002da8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d121      	bne.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	f040 80ca 	bne.w	8002da8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c1c:	441a      	add	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c2a:	441a      	add	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d30b      	bcc.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4c:	1ad2      	subs	r2, r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	621a      	str	r2, [r3, #32]
 8002c52:	e017      	b.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d108      	bne.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002c5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c6c:	e00a      	b.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	657b      	str	r3, [r7, #84]	; 0x54
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	785b      	ldrb	r3, [r3, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d165      	bne.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x748>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca6:	4413      	add	r3, r2
 8002ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	00da      	lsls	r2, r3, #3
 8002cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cce:	2b3e      	cmp	r3, #62	; 0x3e
 8002cd0:	d91d      	bls.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	029b      	lsls	r3, r3, #10
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e041      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x716>
 8002d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e032      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x730>
 8002d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d42:	3301      	adds	r3, #1
 8002d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	029b      	lsls	r3, r3, #10
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	e019      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d115      	bne.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d74:	4413      	add	r3, r2
 8002d76:	657b      	str	r3, [r7, #84]	; 0x54
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	00da      	lsls	r2, r3, #3
 8002d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d80:	4413      	add	r3, r2
 8002d82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d86:	653b      	str	r3, [r7, #80]	; 0x50
 8002d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d90:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6959      	ldr	r1, [r3, #20]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	895a      	ldrh	r2, [r3, #10]
 8002d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f004 fb2e 	bl	8007404 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc2:	82bb      	strh	r3, [r7, #20]
 8002dc4:	8abb      	ldrh	r3, [r7, #20]
 8002dc6:	f083 0310 	eor.w	r3, r3, #16
 8002dca:	82bb      	strh	r3, [r7, #20]
 8002dcc:	8abb      	ldrh	r3, [r7, #20]
 8002dce:	f083 0320 	eor.w	r3, r3, #32
 8002dd2:	82bb      	strh	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	441a      	add	r2, r3
 8002de2:	8abb      	ldrh	r3, [r7, #20]
 8002de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3790      	adds	r7, #144	; 0x90
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b087      	sub	sp, #28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
 8002e10:	4613      	mov	r3, r2
 8002e12:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e14:	897b      	ldrh	r3, [r7, #10]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e20:	897b      	ldrh	r3, [r7, #10]
 8002e22:	f003 0207 	and.w	r2, r3, #7
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	3310      	adds	r3, #16
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e009      	b.n	8002e4c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e38:	897a      	ldrh	r2, [r7, #10]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d107      	bne.n	8002e62 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	80da      	strh	r2, [r3, #6]
 8002e60:	e00b      	b.n	8002e7a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2201      	movs	r2, #1
 8002e66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d141      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eea:	4b4b      	ldr	r3, [pc, #300]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d131      	bne.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ef8:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efe:	4a46      	ldr	r2, [pc, #280]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f08:	4b43      	ldr	r3, [pc, #268]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f10:	4a41      	ldr	r2, [pc, #260]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f18:	4b40      	ldr	r3, [pc, #256]	; (800301c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2232      	movs	r2, #50	; 0x32
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	4a3f      	ldr	r2, [pc, #252]	; (8003020 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2e:	e002      	b.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f42:	d102      	bne.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d158      	bne.n	800300a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e057      	b.n	800300c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f62:	4a2d      	ldr	r2, [pc, #180]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f6c:	e04d      	b.n	800300a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f74:	d141      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f76:	4b28      	ldr	r3, [pc, #160]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	d131      	bne.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8a:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f94:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f9c:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2232      	movs	r2, #50	; 0x32
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9b      	lsrs	r3, r3, #18
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fba:	e002      	b.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d102      	bne.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f2      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d112      	bne.n	800300a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e011      	b.n	800300c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ff8:	e007      	b.n	800300a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003008:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40007000 	.word	0x40007000
 800301c:	20000000 	.word	0x20000000
 8003020:	431bde83 	.word	0x431bde83

08003024 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a04      	ldr	r2, [pc, #16]	; (8003040 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800302e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003032:	6093      	str	r3, [r2, #8]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40007000 	.word	0x40007000

08003044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e2fe      	b.n	8003654 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d075      	beq.n	800314e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003062:	4b97      	ldr	r3, [pc, #604]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800306c:	4b94      	ldr	r3, [pc, #592]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b0c      	cmp	r3, #12
 800307a:	d102      	bne.n	8003082 <HAL_RCC_OscConfig+0x3e>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d002      	beq.n	8003088 <HAL_RCC_OscConfig+0x44>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d10b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	4b8d      	ldr	r3, [pc, #564]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d05b      	beq.n	800314c <HAL_RCC_OscConfig+0x108>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d157      	bne.n	800314c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e2d9      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a8:	d106      	bne.n	80030b8 <HAL_RCC_OscConfig+0x74>
 80030aa:	4b85      	ldr	r3, [pc, #532]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a84      	ldr	r2, [pc, #528]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e01d      	b.n	80030f4 <HAL_RCC_OscConfig+0xb0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x98>
 80030c2:	4b7f      	ldr	r3, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7e      	ldr	r2, [pc, #504]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b7c      	ldr	r3, [pc, #496]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7b      	ldr	r2, [pc, #492]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0xb0>
 80030dc:	4b78      	ldr	r3, [pc, #480]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a77      	ldr	r2, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b75      	ldr	r3, [pc, #468]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a74      	ldr	r2, [pc, #464]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fd fd28 	bl	8000b50 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7fd fd24 	bl	8000b50 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e29e      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003116:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0xc0>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd fd14 	bl	8000b50 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fd fd10 	bl	8000b50 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e28a      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800313e:	4b60      	ldr	r3, [pc, #384]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0xe8>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d075      	beq.n	8003246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315a:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003164:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d102      	bne.n	800317a <HAL_RCC_OscConfig+0x136>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d002      	beq.n	8003180 <HAL_RCC_OscConfig+0x13c>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d11f      	bne.n	80031c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003180:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_OscConfig+0x154>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e25d      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	4946      	ldr	r1, [pc, #280]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031ac:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <HAL_RCC_OscConfig+0x280>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fc81 	bl	8000ab8 <HAL_InitTick>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d043      	beq.n	8003244 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e249      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d023      	beq.n	8003210 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fd fcbc 	bl	8000b50 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031dc:	f7fd fcb8 	bl	8000b50 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e232      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ee:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	061b      	lsls	r3, r3, #24
 8003208:	492d      	ldr	r1, [pc, #180]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
 800320e:	e01a      	b.n	8003246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd fc98 	bl	8000b50 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7fd fc94 	bl	8000b50 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e20e      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1e0>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d041      	beq.n	80032d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01c      	beq.n	8003294 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 800325c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fd fc71 	bl	8000b50 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003272:	f7fd fc6d 	bl	8000b50 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e1e7      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ef      	beq.n	8003272 <HAL_RCC_OscConfig+0x22e>
 8003292:	e020      	b.n	80032d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 8003296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <HAL_RCC_OscConfig+0x27c>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fd fc54 	bl	8000b50 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032aa:	e00d      	b.n	80032c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fd fc50 	bl	8000b50 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d906      	bls.n	80032c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1ca      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c8:	4b8c      	ldr	r3, [pc, #560]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80032ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ea      	bne.n	80032ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80a6 	beq.w	8003430 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032e8:	4b84      	ldr	r3, [pc, #528]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2b4>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x2b6>
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	4a7e      	ldr	r2, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
 800330a:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003316:	2301      	movs	r3, #1
 8003318:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331a:	4b79      	ldr	r3, [pc, #484]	; (8003500 <HAL_RCC_OscConfig+0x4bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d118      	bne.n	8003358 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x4bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x4bc>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003332:	f7fd fc0d 	bl	8000b50 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fd fc09 	bl	8000b50 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e183      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334c:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x4bc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d108      	bne.n	8003372 <HAL_RCC_OscConfig+0x32e>
 8003360:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003370:	e024      	b.n	80033bc <HAL_RCC_OscConfig+0x378>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d110      	bne.n	800339c <HAL_RCC_OscConfig+0x358>
 800337a:	4b60      	ldr	r3, [pc, #384]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	4a5e      	ldr	r2, [pc, #376]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800338a:	4b5c      	ldr	r3, [pc, #368]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	4a5a      	ldr	r2, [pc, #360]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339a:	e00f      	b.n	80033bc <HAL_RCC_OscConfig+0x378>
 800339c:	4b57      	ldr	r3, [pc, #348]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	4a56      	ldr	r2, [pc, #344]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80033b4:	f023 0304 	bic.w	r3, r3, #4
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d016      	beq.n	80033f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fd fbc4 	bl	8000b50 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fd fbc0 	bl	8000b50 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e138      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e2:	4b46      	ldr	r3, [pc, #280]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ed      	beq.n	80033cc <HAL_RCC_OscConfig+0x388>
 80033f0:	e015      	b.n	800341e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fd fbad 	bl	8000b50 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033f8:	e00a      	b.n	8003410 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fd fba9 	bl	8000b50 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e121      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003410:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ed      	bne.n	80033fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800341e:	7ffb      	ldrb	r3, [r7, #31]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	4a34      	ldr	r2, [pc, #208]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d03c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01c      	beq.n	800347e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800344a:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fd fb7c 	bl	8000b50 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800345c:	f7fd fb78 	bl	8000b50 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e0f2      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ef      	beq.n	800345c <HAL_RCC_OscConfig+0x418>
 800347c:	e01b      	b.n	80034b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800347e:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fd fb5f 	bl	8000b50 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003496:	f7fd fb5b 	bl	8000b50 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0d5      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ef      	bne.n	8003496 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80c9 	beq.w	8003652 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	f000 8083 	beq.w	80035d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d15e      	bne.n	8003594 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a08      	ldr	r2, [pc, #32]	; (80034fc <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fd fb35 	bl	8000b50 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	e00c      	b.n	8003504 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fd fb31 	bl	8000b50 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d905      	bls.n	8003504 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0ab      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003504:	4b55      	ldr	r3, [pc, #340]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ec      	bne.n	80034ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003510:	4b52      	ldr	r3, [pc, #328]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	4b52      	ldr	r3, [pc, #328]	; (8003660 <HAL_RCC_OscConfig+0x61c>)
 8003516:	4013      	ands	r3, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6a11      	ldr	r1, [r2, #32]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003520:	3a01      	subs	r2, #1
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800352a:	0212      	lsls	r2, r2, #8
 800352c:	4311      	orrs	r1, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003532:	0852      	lsrs	r2, r2, #1
 8003534:	3a01      	subs	r2, #1
 8003536:	0552      	lsls	r2, r2, #21
 8003538:	4311      	orrs	r1, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800353e:	0852      	lsrs	r2, r2, #1
 8003540:	3a01      	subs	r2, #1
 8003542:	0652      	lsls	r2, r2, #25
 8003544:	4311      	orrs	r1, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800354a:	06d2      	lsls	r2, r2, #27
 800354c:	430a      	orrs	r2, r1
 800354e:	4943      	ldr	r1, [pc, #268]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003550:	4313      	orrs	r3, r2
 8003552:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a40      	ldr	r2, [pc, #256]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800355a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003560:	4b3e      	ldr	r3, [pc, #248]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4a3d      	ldr	r2, [pc, #244]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd faf0 	bl	8000b50 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fd faec 	bl	8000b50 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e066      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003586:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x530>
 8003592:	e05e      	b.n	8003652 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003594:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a30      	ldr	r2, [pc, #192]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800359a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fd fad6 	bl	8000b50 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fd fad2 	bl	8000b50 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e04c      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	4924      	ldr	r1, [pc, #144]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x620>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]
 80035d2:	e03e      	b.n	8003652 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e039      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035e0:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f003 0203 	and.w	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d12c      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	3b01      	subs	r3, #1
 8003600:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d123      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d11b      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d113      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	3b01      	subs	r3, #1
 8003634:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d109      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	019f800c 	.word	0x019f800c
 8003664:	feeefffc 	.word	0xfeeefffc

08003668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e11e      	b.n	80038be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003680:	4b91      	ldr	r3, [pc, #580]	; (80038c8 <HAL_RCC_ClockConfig+0x260>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d910      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b8e      	ldr	r3, [pc, #568]	; (80038c8 <HAL_RCC_ClockConfig+0x260>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 020f 	bic.w	r2, r3, #15
 8003696:	498c      	ldr	r1, [pc, #560]	; (80038c8 <HAL_RCC_ClockConfig+0x260>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b8a      	ldr	r3, [pc, #552]	; (80038c8 <HAL_RCC_ClockConfig+0x260>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e106      	b.n	80038be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d073      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d129      	bne.n	8003718 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c4:	4b81      	ldr	r3, [pc, #516]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0f4      	b.n	80038be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036d4:	f000 f966 	bl	80039a4 <RCC_GetSysClockFreqFromPLLSource>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4a7c      	ldr	r2, [pc, #496]	; (80038d0 <HAL_RCC_ClockConfig+0x268>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d93f      	bls.n	8003762 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036e2:	4b7a      	ldr	r3, [pc, #488]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d033      	beq.n	8003762 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12f      	bne.n	8003762 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003702:	4b72      	ldr	r3, [pc, #456]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800370a:	4a70      	ldr	r2, [pc, #448]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 800370c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003710:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e024      	b.n	8003762 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d107      	bne.n	8003730 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003720:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0c6      	b.n	80038be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0be      	b.n	80038be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003740:	f000 f8ce 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8003744:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4a61      	ldr	r2, [pc, #388]	; (80038d0 <HAL_RCC_ClockConfig+0x268>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d909      	bls.n	8003762 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800374e:	4b5f      	ldr	r3, [pc, #380]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003756:	4a5d      	ldr	r2, [pc, #372]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4957      	ldr	r1, [pc, #348]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fd f9ec 	bl	8000b50 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fd f9e8 	bl	8000b50 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e095      	b.n	80038be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b4e      	ldr	r3, [pc, #312]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b43      	ldr	r3, [pc, #268]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a42      	ldr	r2, [pc, #264]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 80037c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037d4:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037dc:	4a3b      	ldr	r2, [pc, #236]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 80037de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4b39      	ldr	r3, [pc, #228]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4936      	ldr	r1, [pc, #216]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
 80037f6:	e008      	b.n	800380a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b80      	cmp	r3, #128	; 0x80
 80037fc:	d105      	bne.n	800380a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037fe:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4a32      	ldr	r2, [pc, #200]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003808:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800380a:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <HAL_RCC_ClockConfig+0x260>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d21d      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003818:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <HAL_RCC_ClockConfig+0x260>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 020f 	bic.w	r2, r3, #15
 8003820:	4929      	ldr	r1, [pc, #164]	; (80038c8 <HAL_RCC_ClockConfig+0x260>)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003828:	f7fd f992 	bl	8000b50 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fd f98e 	bl	8000b50 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e03b      	b.n	80038be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <HAL_RCC_ClockConfig+0x260>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d1ed      	bne.n	8003830 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4917      	ldr	r1, [pc, #92]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	490f      	ldr	r1, [pc, #60]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003892:	f000 f825 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8003896:	4602      	mov	r2, r0
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_RCC_ClockConfig+0x264>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	490c      	ldr	r1, [pc, #48]	; (80038d4 <HAL_RCC_ClockConfig+0x26c>)
 80038a4:	5ccb      	ldrb	r3, [r1, r3]
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	fa22 f303 	lsr.w	r3, r2, r3
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x270>)
 80038b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd f8fe 	bl	8000ab8 <HAL_InitTick>
 80038bc:	4603      	mov	r3, r0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40021000 	.word	0x40021000
 80038d0:	04c4b400 	.word	0x04c4b400
 80038d4:	080097cc 	.word	0x080097cc
 80038d8:	20000000 	.word	0x20000000
 80038dc:	20000004 	.word	0x20000004

080038e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038e6:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d102      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038f2:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e047      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b08      	cmp	r3, #8
 8003902:	d102      	bne.n	800390a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003904:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e03e      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d136      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003920:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3301      	adds	r3, #1
 800392c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d10c      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003934:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800393e:	68d2      	ldr	r2, [r2, #12]
 8003940:	0a12      	lsrs	r2, r2, #8
 8003942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	617b      	str	r3, [r7, #20]
      break;
 800394c:	e00c      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800394e:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	0a12      	lsrs	r2, r2, #8
 800395c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003960:	fb02 f303 	mul.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
      break;
 8003966:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	0e5b      	lsrs	r3, r3, #25
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	3301      	adds	r3, #1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	e001      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003988:	693b      	ldr	r3, [r7, #16]
}
 800398a:	4618      	mov	r0, r3
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000
 800399c:	00f42400 	.word	0x00f42400
 80039a0:	007a1200 	.word	0x007a1200

080039a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d10c      	bne.n	80039e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039c8:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d2:	68d2      	ldr	r2, [r2, #12]
 80039d4:	0a12      	lsrs	r2, r2, #8
 80039d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	617b      	str	r3, [r7, #20]
    break;
 80039e0:	e00c      	b.n	80039fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	4a0e      	ldr	r2, [pc, #56]	; (8003a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ec:	68d2      	ldr	r2, [r2, #12]
 80039ee:	0a12      	lsrs	r2, r2, #8
 80039f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]
    break;
 80039fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0e5b      	lsrs	r3, r3, #25
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	3301      	adds	r3, #1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a16:	687b      	ldr	r3, [r7, #4]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40021000 	.word	0x40021000
 8003a28:	007a1200 	.word	0x007a1200
 8003a2c:	00f42400 	.word	0x00f42400

08003a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a38:	2300      	movs	r3, #0
 8003a3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8098 	beq.w	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a52:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	4b40      	ldr	r3, [pc, #256]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	4a3f      	ldr	r2, [pc, #252]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a68:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a76:	2301      	movs	r3, #1
 8003a78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a86:	f7fd f863 	bl	8000b50 <HAL_GetTick>
 8003a8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8c:	e009      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fd f85f 	bl	8000b50 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d902      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	74fb      	strb	r3, [r7, #19]
        break;
 8003aa0:	e005      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa2:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ef      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d159      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01e      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d019      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ad0:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003adc:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd f81f 	bl	8000b50 <HAL_GetTick>
 8003b12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b14:	e00b      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fd f81b 	bl	8000b50 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d902      	bls.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ec      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	4903      	ldr	r1, [pc, #12]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b58:	e008      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	74bb      	strb	r3, [r7, #18]
 8003b5e:	e005      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b6c:	7c7b      	ldrb	r3, [r7, #17]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d105      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b72:	4ba6      	ldr	r3, [pc, #664]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b76:	4aa5      	ldr	r2, [pc, #660]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8a:	4ba0      	ldr	r3, [pc, #640]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f023 0203 	bic.w	r2, r3, #3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	499c      	ldr	r1, [pc, #624]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bac:	4b97      	ldr	r3, [pc, #604]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f023 020c 	bic.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	4994      	ldr	r1, [pc, #592]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bce:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	498b      	ldr	r1, [pc, #556]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf0:	4b86      	ldr	r3, [pc, #536]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	4983      	ldr	r1, [pc, #524]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c12:	4b7e      	ldr	r3, [pc, #504]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	497a      	ldr	r1, [pc, #488]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c34:	4b75      	ldr	r3, [pc, #468]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	4972      	ldr	r1, [pc, #456]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c56:	4b6d      	ldr	r3, [pc, #436]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4969      	ldr	r1, [pc, #420]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c78:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4961      	ldr	r1, [pc, #388]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	4958      	ldr	r1, [pc, #352]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cbc:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	4950      	ldr	r1, [pc, #320]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a4a      	ldr	r2, [pc, #296]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d015      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cf4:	4b45      	ldr	r3, [pc, #276]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	4942      	ldr	r1, [pc, #264]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d12:	d105      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d14:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d015      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d2c:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4934      	ldr	r1, [pc, #208]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4c:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a2e      	ldr	r2, [pc, #184]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d64:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d72:	4926      	ldr	r1, [pc, #152]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d82:	d105      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	4918      	ldr	r1, [pc, #96]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	490a      	ldr	r1, [pc, #40]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df2:	d105      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e00:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e049      	b.n	8003eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fc fd6a 	bl	8000910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 fab0 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e049      	b.n	8003f64 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f841 	bl	8003f6c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f000 fa59 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e097      	b.n	80040c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fc fc41 	bl	8000830 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003fc4:	f023 0307 	bic.w	r3, r3, #7
 8003fc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f000 f9ed 	bl	80043b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	4313      	orrs	r3, r2
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004020:	f023 030c 	bic.w	r3, r3, #12
 8004024:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	4313      	orrs	r3, r2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	031b      	lsls	r3, r3, #12
 8004050:	4313      	orrs	r3, r2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	4313      	orrs	r3, r2
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_TIM_OC_ConfigChannel+0x1e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e066      	b.n	80041b8 <HAL_TIM_OC_ConfigChannel+0xec>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b14      	cmp	r3, #20
 80040f6:	d857      	bhi.n	80041a8 <HAL_TIM_OC_ConfigChannel+0xdc>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <HAL_TIM_OC_ConfigChannel+0x34>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004155 	.word	0x08004155
 8004104:	080041a9 	.word	0x080041a9
 8004108:	080041a9 	.word	0x080041a9
 800410c:	080041a9 	.word	0x080041a9
 8004110:	08004163 	.word	0x08004163
 8004114:	080041a9 	.word	0x080041a9
 8004118:	080041a9 	.word	0x080041a9
 800411c:	080041a9 	.word	0x080041a9
 8004120:	08004171 	.word	0x08004171
 8004124:	080041a9 	.word	0x080041a9
 8004128:	080041a9 	.word	0x080041a9
 800412c:	080041a9 	.word	0x080041a9
 8004130:	0800417f 	.word	0x0800417f
 8004134:	080041a9 	.word	0x080041a9
 8004138:	080041a9 	.word	0x080041a9
 800413c:	080041a9 	.word	0x080041a9
 8004140:	0800418d 	.word	0x0800418d
 8004144:	080041a9 	.word	0x080041a9
 8004148:	080041a9 	.word	0x080041a9
 800414c:	080041a9 	.word	0x080041a9
 8004150:	0800419b 	.word	0x0800419b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f9c6 	bl	80044ec <TIM_OC1_SetConfig>
      break;
 8004160:	e025      	b.n	80041ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fa4f 	bl	800460c <TIM_OC2_SetConfig>
      break;
 800416e:	e01e      	b.n	80041ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fad2 	bl	8004720 <TIM_OC3_SetConfig>
      break;
 800417c:	e017      	b.n	80041ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fb53 	bl	8004830 <TIM_OC4_SetConfig>
      break;
 800418a:	e010      	b.n	80041ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fbd6 	bl	8004944 <TIM_OC5_SetConfig>
      break;
 8004198:	e009      	b.n	80041ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fc33 	bl	8004a0c <TIM_OC6_SetConfig>
      break;
 80041a6:	e002      	b.n	80041ae <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      break;
 80041ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_TIM_ConfigClockSource+0x1c>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0de      	b.n	800439a <HAL_TIM_ConfigClockSource+0x1da>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80041fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a63      	ldr	r2, [pc, #396]	; (80043a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	f000 80a9 	beq.w	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 800421c:	4a61      	ldr	r2, [pc, #388]	; (80043a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	f200 80ae 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004224:	4a60      	ldr	r2, [pc, #384]	; (80043a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	f000 80a1 	beq.w	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 800422c:	4a5e      	ldr	r2, [pc, #376]	; (80043a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	f200 80a6 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004234:	4a5d      	ldr	r2, [pc, #372]	; (80043ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8004236:	4293      	cmp	r3, r2
 8004238:	f000 8099 	beq.w	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 800423c:	4a5b      	ldr	r2, [pc, #364]	; (80043ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800423e:	4293      	cmp	r3, r2
 8004240:	f200 809e 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004244:	4a5a      	ldr	r2, [pc, #360]	; (80043b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	f000 8091 	beq.w	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 800424c:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	f200 8096 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004254:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004258:	f000 8089 	beq.w	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 800425c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004260:	f200 808e 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004268:	d03e      	beq.n	80042e8 <HAL_TIM_ConfigClockSource+0x128>
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426e:	f200 8087 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	f000 8086 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x1c6>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427e:	d87f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004280:	2b70      	cmp	r3, #112	; 0x70
 8004282:	d01a      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0xfa>
 8004284:	2b70      	cmp	r3, #112	; 0x70
 8004286:	d87b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004288:	2b60      	cmp	r3, #96	; 0x60
 800428a:	d050      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x16e>
 800428c:	2b60      	cmp	r3, #96	; 0x60
 800428e:	d877      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004290:	2b50      	cmp	r3, #80	; 0x50
 8004292:	d03c      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x14e>
 8004294:	2b50      	cmp	r3, #80	; 0x50
 8004296:	d873      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d058      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x18e>
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d86f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 80042a0:	2b30      	cmp	r3, #48	; 0x30
 80042a2:	d064      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 80042a4:	2b30      	cmp	r3, #48	; 0x30
 80042a6:	d86b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d060      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d867      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d05a      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x1ae>
 80042b8:	e062      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042ca:	f000 fc81 	bl	8004bd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	609a      	str	r2, [r3, #8]
      break;
 80042e6:	e04f      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042f8:	f000 fc6a 	bl	8004bd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800430a:	609a      	str	r2, [r3, #8]
      break;
 800430c:	e03c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fbdc 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2150      	movs	r1, #80	; 0x50
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fc35 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 800432c:	e02c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fbfb 	bl	8004b36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2160      	movs	r1, #96	; 0x60
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fc25 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 800434c:	e01c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	461a      	mov	r2, r3
 800435c:	f000 fbbc 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2140      	movs	r1, #64	; 0x40
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fc15 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 800436c:	e00c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f000 fc0c 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 800437e:	e003      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      break;
 8004384:	e000      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	00100070 	.word	0x00100070
 80043a8:	00100040 	.word	0x00100040
 80043ac:	00100030 	.word	0x00100030
 80043b0:	00100020 	.word	0x00100020

080043b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a42      	ldr	r2, [pc, #264]	; (80044d0 <TIM_Base_SetConfig+0x11c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00f      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d00b      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a3f      	ldr	r2, [pc, #252]	; (80044d4 <TIM_Base_SetConfig+0x120>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a3e      	ldr	r2, [pc, #248]	; (80044d8 <TIM_Base_SetConfig+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a3d      	ldr	r2, [pc, #244]	; (80044dc <TIM_Base_SetConfig+0x128>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d108      	bne.n	80043fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a33      	ldr	r2, [pc, #204]	; (80044d0 <TIM_Base_SetConfig+0x11c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01b      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d017      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <TIM_Base_SetConfig+0x120>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2f      	ldr	r2, [pc, #188]	; (80044d8 <TIM_Base_SetConfig+0x124>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a2e      	ldr	r2, [pc, #184]	; (80044dc <TIM_Base_SetConfig+0x128>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2d      	ldr	r2, [pc, #180]	; (80044e0 <TIM_Base_SetConfig+0x12c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2c      	ldr	r2, [pc, #176]	; (80044e4 <TIM_Base_SetConfig+0x130>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2b      	ldr	r2, [pc, #172]	; (80044e8 <TIM_Base_SetConfig+0x134>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <TIM_Base_SetConfig+0x11c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00f      	beq.n	800449c <TIM_Base_SetConfig+0xe8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a17      	ldr	r2, [pc, #92]	; (80044dc <TIM_Base_SetConfig+0x128>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00b      	beq.n	800449c <TIM_Base_SetConfig+0xe8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <TIM_Base_SetConfig+0x12c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d007      	beq.n	800449c <TIM_Base_SetConfig+0xe8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <TIM_Base_SetConfig+0x130>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <TIM_Base_SetConfig+0xe8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <TIM_Base_SetConfig+0x134>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d103      	bne.n	80044a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f023 0201 	bic.w	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	611a      	str	r2, [r3, #16]
  }
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40013400 	.word	0x40013400
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800

080044ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f023 0201 	bic.w	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f023 0302 	bic.w	r3, r3, #2
 8004538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a2c      	ldr	r2, [pc, #176]	; (80045f8 <TIM_OC1_SetConfig+0x10c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00f      	beq.n	800456c <TIM_OC1_SetConfig+0x80>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <TIM_OC1_SetConfig+0x110>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_OC1_SetConfig+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <TIM_OC1_SetConfig+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_OC1_SetConfig+0x80>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a29      	ldr	r2, [pc, #164]	; (8004604 <TIM_OC1_SetConfig+0x118>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_OC1_SetConfig+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a28      	ldr	r2, [pc, #160]	; (8004608 <TIM_OC1_SetConfig+0x11c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10c      	bne.n	8004586 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0308 	bic.w	r3, r3, #8
 8004572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <TIM_OC1_SetConfig+0x10c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_OC1_SetConfig+0xc2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <TIM_OC1_SetConfig+0x110>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_OC1_SetConfig+0xc2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <TIM_OC1_SetConfig+0x114>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_OC1_SetConfig+0xc2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a18      	ldr	r2, [pc, #96]	; (8004604 <TIM_OC1_SetConfig+0x118>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_OC1_SetConfig+0xc2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a17      	ldr	r2, [pc, #92]	; (8004608 <TIM_OC1_SetConfig+0x11c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d111      	bne.n	80045d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40013400 	.word	0x40013400
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f023 0210 	bic.w	r2, r3, #16
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0320 	bic.w	r3, r3, #32
 800465a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a28      	ldr	r2, [pc, #160]	; (800470c <TIM_OC2_SetConfig+0x100>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_OC2_SetConfig+0x6c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a27      	ldr	r2, [pc, #156]	; (8004710 <TIM_OC2_SetConfig+0x104>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10d      	bne.n	8004694 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800467e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004692:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1d      	ldr	r2, [pc, #116]	; (800470c <TIM_OC2_SetConfig+0x100>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00f      	beq.n	80046bc <TIM_OC2_SetConfig+0xb0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a1c      	ldr	r2, [pc, #112]	; (8004710 <TIM_OC2_SetConfig+0x104>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00b      	beq.n	80046bc <TIM_OC2_SetConfig+0xb0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <TIM_OC2_SetConfig+0x108>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <TIM_OC2_SetConfig+0xb0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <TIM_OC2_SetConfig+0x10c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_OC2_SetConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a19      	ldr	r2, [pc, #100]	; (800471c <TIM_OC2_SetConfig+0x110>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d113      	bne.n	80046e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40013400 	.word	0x40013400
 8004714:	40014000 	.word	0x40014000
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800

08004720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800476c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a27      	ldr	r2, [pc, #156]	; (800481c <TIM_OC3_SetConfig+0xfc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_OC3_SetConfig+0x6a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a26      	ldr	r2, [pc, #152]	; (8004820 <TIM_OC3_SetConfig+0x100>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10d      	bne.n	80047a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <TIM_OC3_SetConfig+0xfc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00f      	beq.n	80047ce <TIM_OC3_SetConfig+0xae>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <TIM_OC3_SetConfig+0x100>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00b      	beq.n	80047ce <TIM_OC3_SetConfig+0xae>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <TIM_OC3_SetConfig+0x104>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <TIM_OC3_SetConfig+0xae>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <TIM_OC3_SetConfig+0x108>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_OC3_SetConfig+0xae>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <TIM_OC3_SetConfig+0x10c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d113      	bne.n	80047f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800

08004830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a28      	ldr	r2, [pc, #160]	; (8004930 <TIM_OC4_SetConfig+0x100>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC4_SetConfig+0x6c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a27      	ldr	r2, [pc, #156]	; (8004934 <TIM_OC4_SetConfig+0x104>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d10d      	bne.n	80048b8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <TIM_OC4_SetConfig+0x100>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_OC4_SetConfig+0xb0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <TIM_OC4_SetConfig+0x104>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_OC4_SetConfig+0xb0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <TIM_OC4_SetConfig+0x108>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_OC4_SetConfig+0xb0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a1a      	ldr	r2, [pc, #104]	; (800493c <TIM_OC4_SetConfig+0x10c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_OC4_SetConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a19      	ldr	r2, [pc, #100]	; (8004940 <TIM_OC4_SetConfig+0x110>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d113      	bne.n	8004908 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	019b      	lsls	r3, r3, #6
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40013400 	.word	0x40013400
 8004938:	40014000 	.word	0x40014000
 800493c:	40014400 	.word	0x40014400
 8004940:	40014800 	.word	0x40014800

08004944 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <TIM_OC5_SetConfig+0xb4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00f      	beq.n	80049be <TIM_OC5_SetConfig+0x7a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a16      	ldr	r2, [pc, #88]	; (80049fc <TIM_OC5_SetConfig+0xb8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_OC5_SetConfig+0x7a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <TIM_OC5_SetConfig+0xbc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC5_SetConfig+0x7a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <TIM_OC5_SetConfig+0xc0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC5_SetConfig+0x7a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <TIM_OC5_SetConfig+0xc4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d109      	bne.n	80049d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	051b      	lsls	r3, r3, #20
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <TIM_OC6_SetConfig+0xb8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00f      	beq.n	8004a88 <TIM_OC6_SetConfig+0x7c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <TIM_OC6_SetConfig+0xbc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <TIM_OC6_SetConfig+0x7c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <TIM_OC6_SetConfig+0xc0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_OC6_SetConfig+0x7c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <TIM_OC6_SetConfig+0xc4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_OC6_SetConfig+0x7c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <TIM_OC6_SetConfig+0xc8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d109      	bne.n	8004a9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	029b      	lsls	r3, r3, #10
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40013400 	.word	0x40013400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800

08004ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 030a 	bic.w	r3, r3, #10
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b087      	sub	sp, #28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f023 0210 	bic.w	r2, r3, #16
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f043 0307 	orr.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	609a      	str	r2, [r3, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	021a      	lsls	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	609a      	str	r2, [r3, #8]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e065      	b.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d013      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d10c      	bne.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40014000 	.word	0x40014000

08004d14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e073      	b.n	8004e18 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d11c      	bne.n	8004e06 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	051b      	lsls	r3, r3, #20
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40013400 	.word	0x40013400

08004e2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e3c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004e40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e62:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004e66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	4013      	ands	r3, r2
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	1d3b      	adds	r3, r7, #4
 8004e9a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b09d      	sub	sp, #116	; 0x74
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	78db      	ldrb	r3, [r3, #3]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d81f      	bhi.n	8004f3e <USB_ActivateEndpoint+0x72>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <USB_ActivateEndpoint+0x38>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f31 	.word	0x08004f31
 8004f0c:	08004f47 	.word	0x08004f47
 8004f10:	08004f23 	.word	0x08004f23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f20:	e012      	b.n	8004f48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004f2a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f2e:	e00b      	b.n	8004f48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004f3c:	e004      	b.n	8004f48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004f44:	e000      	b.n	8004f48 <USB_ActivateEndpoint+0x7c>
      break;
 8004f46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	b21b      	sxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	b21a      	sxth	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	7b1b      	ldrb	r3, [r3, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f040 8178 	bne.w	80052ae <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8084 	beq.w	80050d0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	4413      	add	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	00da      	lsls	r2, r3, #3
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	88db      	ldrh	r3, [r3, #6]
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	827b      	strh	r3, [r7, #18]
 800500a:	8a7b      	ldrh	r3, [r7, #18]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <USB_ActivateEndpoint+0x180>
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	823b      	strh	r3, [r7, #16]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	441a      	add	r2, r3
 8005036:	8a3b      	ldrh	r3, [r7, #16]
 8005038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005048:	b29b      	uxth	r3, r3
 800504a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	78db      	ldrb	r3, [r3, #3]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d020      	beq.n	8005096 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506a:	81bb      	strh	r3, [r7, #12]
 800506c:	89bb      	ldrh	r3, [r7, #12]
 800506e:	f083 0320 	eor.w	r3, r3, #32
 8005072:	81bb      	strh	r3, [r7, #12]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	89bb      	ldrh	r3, [r7, #12]
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]
 8005094:	e2d5      	b.n	8005642 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ac:	81fb      	strh	r3, [r7, #14]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	441a      	add	r2, r3
 80050b8:	89fb      	ldrh	r3, [r7, #14]
 80050ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]
 80050ce:	e2b8      	b.n	8005642 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050da:	b29b      	uxth	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	4413      	add	r3, r2
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	00da      	lsls	r2, r3, #3
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	4413      	add	r3, r2
 80050ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	88db      	ldrh	r3, [r3, #6]
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510e:	b29b      	uxth	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	4413      	add	r3, r2
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	00da      	lsls	r2, r3, #3
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	4413      	add	r3, r2
 8005122:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005132:	b29a      	uxth	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b3e      	cmp	r3, #62	; 0x3e
 800513e:	d91d      	bls.n	800517c <USB_ActivateEndpoint+0x2b0>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	66bb      	str	r3, [r7, #104]	; 0x68
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <USB_ActivateEndpoint+0x28e>
 8005154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005156:	3b01      	subs	r3, #1
 8005158:	66bb      	str	r3, [r7, #104]	; 0x68
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29a      	uxth	r2, r3
 8005160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005162:	b29b      	uxth	r3, r3
 8005164:	029b      	lsls	r3, r3, #10
 8005166:	b29b      	uxth	r3, r3
 8005168:	4313      	orrs	r3, r2
 800516a:	b29b      	uxth	r3, r3
 800516c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005174:	b29a      	uxth	r2, r3
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	e026      	b.n	80051ca <USB_ActivateEndpoint+0x2fe>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <USB_ActivateEndpoint+0x2ce>
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005192:	b29a      	uxth	r2, r3
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	e017      	b.n	80051ca <USB_ActivateEndpoint+0x2fe>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <USB_ActivateEndpoint+0x2e8>
 80051ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051b0:	3301      	adds	r3, #1
 80051b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051bc:	b29b      	uxth	r3, r3
 80051be:	029b      	lsls	r3, r3, #10
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80051d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01b      	beq.n	800521a <USB_ActivateEndpoint+0x34e>
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f8:	843b      	strh	r3, [r7, #32]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	8c3b      	ldrh	r3, [r7, #32]
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d124      	bne.n	800526c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005238:	83bb      	strh	r3, [r7, #28]
 800523a:	8bbb      	ldrh	r3, [r7, #28]
 800523c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005240:	83bb      	strh	r3, [r7, #28]
 8005242:	8bbb      	ldrh	r3, [r7, #28]
 8005244:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005248:	83bb      	strh	r3, [r7, #28]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	8bbb      	ldrh	r3, [r7, #28]
 8005256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005266:	b29b      	uxth	r3, r3
 8005268:	8013      	strh	r3, [r2, #0]
 800526a:	e1ea      	b.n	8005642 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	83fb      	strh	r3, [r7, #30]
 8005284:	8bfb      	ldrh	r3, [r7, #30]
 8005286:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800528a:	83fb      	strh	r3, [r7, #30]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	8bfb      	ldrh	r3, [r7, #30]
 8005298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]
 80052ac:	e1c9      	b.n	8005642 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	78db      	ldrb	r3, [r3, #3]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d11e      	bne.n	80052f4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80052de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	8013      	strh	r3, [r2, #0]
 80052f2:	e01d      	b.n	8005330 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	441a      	add	r2, r3
 8005318:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800531c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533a:	b29b      	uxth	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005340:	4413      	add	r3, r2
 8005342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	00da      	lsls	r2, r3, #3
 800534a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800534c:	4413      	add	r3, r2
 800534e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005352:	65bb      	str	r3, [r7, #88]	; 0x58
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	891b      	ldrh	r3, [r3, #8]
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	b29b      	uxth	r3, r3
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	657b      	str	r3, [r7, #84]	; 0x54
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005374:	4413      	add	r3, r2
 8005376:	657b      	str	r3, [r7, #84]	; 0x54
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	00da      	lsls	r2, r3, #3
 800537e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005380:	4413      	add	r3, r2
 8005382:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005386:	653b      	str	r3, [r7, #80]	; 0x50
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	895b      	ldrh	r3, [r3, #10]
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	b29b      	uxth	r3, r3
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005396:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 8093 	bne.w	80054c8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01b      	beq.n	80053f6 <USB_ActivateEndpoint+0x52a>
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01b      	beq.n	8005446 <USB_ActivateEndpoint+0x57a>
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005424:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	873b      	strh	r3, [r7, #56]	; 0x38
 800545e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005460:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005464:	873b      	strh	r3, [r7, #56]	; 0x38
 8005466:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005468:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800546c:	873b      	strh	r3, [r7, #56]	; 0x38
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800547a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	b29b      	uxth	r3, r3
 800548c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8013      	strh	r3, [r2, #0]
 80054c6:	e0bc      	b.n	8005642 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80054d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01d      	beq.n	8005520 <USB_ActivateEndpoint+0x654>
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800550c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551c:	b29b      	uxth	r3, r3
 800551e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005530:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01d      	beq.n	8005578 <USB_ActivateEndpoint+0x6ac>
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	78db      	ldrb	r3, [r3, #3]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d024      	beq.n	80055ca <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005596:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800559a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800559e:	f083 0320 	eor.w	r3, r3, #32
 80055a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	441a      	add	r2, r3
 80055b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80055b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8013      	strh	r3, [r2, #0]
 80055c8:	e01d      	b.n	8005606 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80055f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	b29b      	uxth	r3, r3
 8005604:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005646:	4618      	mov	r0, r3
 8005648:	3774      	adds	r7, #116	; 0x74
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop

08005654 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005654:	b480      	push	{r7}
 8005656:	b08d      	sub	sp, #52	; 0x34
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	7b1b      	ldrb	r3, [r3, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 808e 	bne.w	8005784 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d044      	beq.n	80056fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	81bb      	strh	r3, [r7, #12]
 800567e:	89bb      	ldrh	r3, [r7, #12]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01b      	beq.n	80056c0 <USB_DeactivateEndpoint+0x6c>
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	817b      	strh	r3, [r7, #10]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	897b      	ldrh	r3, [r7, #10]
 80056ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d6:	813b      	strh	r3, [r7, #8]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	893b      	ldrh	r3, [r7, #8]
 80056e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8013      	strh	r3, [r2, #0]
 80056f8:	e192      	b.n	8005a20 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	827b      	strh	r3, [r7, #18]
 8005708:	8a7b      	ldrh	r3, [r7, #18]
 800570a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01b      	beq.n	800574a <USB_DeactivateEndpoint+0xf6>
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	823b      	strh	r3, [r7, #16]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	8a3b      	ldrh	r3, [r7, #16]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	81fb      	strh	r3, [r7, #14]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577e:	b29b      	uxth	r3, r3
 8005780:	8013      	strh	r3, [r2, #0]
 8005782:	e14d      	b.n	8005a20 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f040 80a5 	bne.w	80058d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	843b      	strh	r3, [r7, #32]
 800579c:	8c3b      	ldrh	r3, [r7, #32]
 800579e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01b      	beq.n	80057de <USB_DeactivateEndpoint+0x18a>
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057bc:	83fb      	strh	r3, [r7, #30]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	441a      	add	r2, r3
 80057c8:	8bfb      	ldrh	r3, [r7, #30]
 80057ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057da:	b29b      	uxth	r3, r3
 80057dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	83bb      	strh	r3, [r7, #28]
 80057ec:	8bbb      	ldrh	r3, [r7, #28]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01b      	beq.n	800582e <USB_DeactivateEndpoint+0x1da>
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580c:	837b      	strh	r3, [r7, #26]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	8b7b      	ldrh	r3, [r7, #26]
 800581a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	833b      	strh	r3, [r7, #24]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	441a      	add	r2, r3
 8005850:	8b3b      	ldrh	r3, [r7, #24]
 8005852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005862:	b29b      	uxth	r3, r3
 8005864:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587c:	82fb      	strh	r3, [r7, #22]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	441a      	add	r2, r3
 8005888:	8afb      	ldrh	r3, [r7, #22]
 800588a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589a:	b29b      	uxth	r3, r3
 800589c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b4:	82bb      	strh	r3, [r7, #20]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	441a      	add	r2, r3
 80058c0:	8abb      	ldrh	r3, [r7, #20]
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]
 80058d6:	e0a3      	b.n	8005a20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80058e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01b      	beq.n	8005928 <USB_DeactivateEndpoint+0x2d4>
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	441a      	add	r2, r3
 8005912:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005924:	b29b      	uxth	r3, r3
 8005926:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005936:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <USB_DeactivateEndpoint+0x324>
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	853b      	strh	r3, [r7, #40]	; 0x28
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005970:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800599c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	441a      	add	r2, r3
 80059d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3734      	adds	r7, #52	; 0x34
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b0c2      	sub	sp, #264	; 0x108
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a3c:	6018      	str	r0, [r3, #0]
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a46:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	f040 86b7 	bne.w	80067c8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d908      	bls.n	8005a88 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a86:	e007      	b.n	8005a98 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	7b1b      	ldrb	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d13a      	bne.n	8005b1e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6959      	ldr	r1, [r3, #20]
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	88da      	ldrh	r2, [r3, #6]
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005aca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ace:	6800      	ldr	r0, [r0, #0]
 8005ad0:	f001 fc98 	bl	8007404 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	00da      	lsls	r2, r3, #3
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	f000 be1f 	b.w	800675c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	78db      	ldrb	r3, [r3, #3]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	f040 8462 	bne.w	80063f4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	f240 83df 	bls.w	800630c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 81c7 	beq.w	8005f7e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d177      	bne.n	8005cfc <USB_EPStartXfer+0x2ce>
 8005c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	4413      	add	r3, r2
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	00da      	lsls	r2, r3, #3
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	4413      	add	r3, r2
 8005c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c5e:	d921      	bls.n	8005ca4 <USB_EPStartXfer+0x276>
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <USB_EPStartXfer+0x252>
 8005c76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	029b      	lsls	r3, r3, #10
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4313      	orrs	r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	e050      	b.n	8005d46 <USB_EPStartXfer+0x318>
 8005ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <USB_EPStartXfer+0x294>
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e041      	b.n	8005d46 <USB_EPStartXfer+0x318>
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <USB_EPStartXfer+0x2b4>
 8005cd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	029b      	lsls	r3, r3, #10
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e024      	b.n	8005d46 <USB_EPStartXfer+0x318>
 8005cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d11c      	bne.n	8005d46 <USB_EPStartXfer+0x318>
 8005d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	4413      	add	r3, r2
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	00da      	lsls	r2, r3, #3
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	895b      	ldrh	r3, [r3, #10]
 8005d52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6959      	ldr	r1, [r3, #20]
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d6c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d70:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d74:	6800      	ldr	r0, [r0, #0]
 8005d76:	f001 fb45 	bl	8007404 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8a:	441a      	add	r2, r3
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d90f      	bls.n	8005dd4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc4:	1ad2      	subs	r2, r2, r3
 8005dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	621a      	str	r2, [r3, #32]
 8005dd2:	e00e      	b.n	8005df2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d177      	bne.n	8005ef2 <USB_EPStartXfer+0x4c4>
 8005e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	4413      	add	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	00da      	lsls	r2, r3, #3
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	4413      	add	r3, r2
 8005e38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e52:	2b3e      	cmp	r3, #62	; 0x3e
 8005e54:	d921      	bls.n	8005e9a <USB_EPStartXfer+0x46c>
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <USB_EPStartXfer+0x448>
 8005e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e70:	3b01      	subs	r3, #1
 8005e72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	e056      	b.n	8005f48 <USB_EPStartXfer+0x51a>
 8005e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <USB_EPStartXfer+0x48a>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e047      	b.n	8005f48 <USB_EPStartXfer+0x51a>
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <USB_EPStartXfer+0x4aa>
 8005ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	029b      	lsls	r3, r3, #10
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	801a      	strh	r2, [r3, #0]
 8005ef0:	e02a      	b.n	8005f48 <USB_EPStartXfer+0x51a>
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d122      	bne.n	8005f48 <USB_EPStartXfer+0x51a>
 8005f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	4413      	add	r3, r2
 8005f24:	623b      	str	r3, [r7, #32]
 8005f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	00da      	lsls	r2, r3, #3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	4413      	add	r3, r2
 8005f38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	891b      	ldrh	r3, [r3, #8]
 8005f54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6959      	ldr	r1, [r3, #20]
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f76:	6800      	ldr	r0, [r0, #0]
 8005f78:	f001 fa44 	bl	8007404 <USB_WritePMA>
 8005f7c:	e3ee      	b.n	800675c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d177      	bne.n	800607e <USB_EPStartXfer+0x650>
 8005f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fae:	4413      	add	r3, r2
 8005fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	00da      	lsls	r2, r3, #3
 8005fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fde:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe0:	d921      	bls.n	8006026 <USB_EPStartXfer+0x5f8>
 8005fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <USB_EPStartXfer+0x5d4>
 8005ff8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29a      	uxth	r2, r3
 8006008:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800600c:	b29b      	uxth	r3, r3
 800600e:	029b      	lsls	r3, r3, #10
 8006010:	b29b      	uxth	r3, r3
 8006012:	4313      	orrs	r3, r2
 8006014:	b29b      	uxth	r3, r3
 8006016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601e:	b29a      	uxth	r2, r3
 8006020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e056      	b.n	80060d4 <USB_EPStartXfer+0x6a6>
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <USB_EPStartXfer+0x616>
 800602e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603c:	b29a      	uxth	r2, r3
 800603e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e047      	b.n	80060d4 <USB_EPStartXfer+0x6a6>
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006048:	085b      	lsrs	r3, r3, #1
 800604a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <USB_EPStartXfer+0x636>
 800605a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800605e:	3301      	adds	r3, #1
 8006060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29a      	uxth	r2, r3
 800606a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800606e:	b29b      	uxth	r3, r3
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	b29b      	uxth	r3, r3
 8006074:	4313      	orrs	r3, r2
 8006076:	b29a      	uxth	r2, r3
 8006078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607a:	801a      	strh	r2, [r3, #0]
 800607c:	e02a      	b.n	80060d4 <USB_EPStartXfer+0x6a6>
 800607e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d122      	bne.n	80060d4 <USB_EPStartXfer+0x6a6>
 800608e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	653b      	str	r3, [r7, #80]	; 0x50
 800609a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ae:	4413      	add	r3, r2
 80060b0:	653b      	str	r3, [r7, #80]	; 0x50
 80060b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	00da      	lsls	r2, r3, #3
 80060c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c2:	4413      	add	r3, r2
 80060c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	891b      	ldrh	r3, [r3, #8]
 80060e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6959      	ldr	r1, [r3, #20]
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006102:	6800      	ldr	r0, [r0, #0]
 8006104:	f001 f97e 	bl	8007404 <USB_WritePMA>
            ep->xfer_buff += len;
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695a      	ldr	r2, [r3, #20]
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006118:	441a      	add	r2, r3
 800611a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6a1a      	ldr	r2, [r3, #32]
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	429a      	cmp	r2, r3
 8006140:	d90f      	bls.n	8006162 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a1a      	ldr	r2, [r3, #32]
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006152:	1ad2      	subs	r2, r2, r3
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	621a      	str	r2, [r3, #32]
 8006160:	e00e      	b.n	8006180 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d177      	bne.n	800628c <USB_EPStartXfer+0x85e>
 800619c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	4413      	add	r3, r2
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00da      	lsls	r2, r3, #3
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	4413      	add	r3, r2
 80061d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ec:	2b3e      	cmp	r3, #62	; 0x3e
 80061ee:	d921      	bls.n	8006234 <USB_EPStartXfer+0x806>
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <USB_EPStartXfer+0x7e2>
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620a:	3b01      	subs	r3, #1
 800620c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	b29b      	uxth	r3, r3
 800621c:	029b      	lsls	r3, r3, #10
 800621e:	b29b      	uxth	r3, r3
 8006220:	4313      	orrs	r3, r2
 8006222:	b29b      	uxth	r3, r3
 8006224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622c:	b29a      	uxth	r2, r3
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e050      	b.n	80062d6 <USB_EPStartXfer+0x8a8>
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <USB_EPStartXfer+0x824>
 800623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624a:	b29a      	uxth	r2, r3
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	e041      	b.n	80062d6 <USB_EPStartXfer+0x8a8>
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <USB_EPStartXfer+0x844>
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	3301      	adds	r3, #1
 800626e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	b29b      	uxth	r3, r3
 800627e:	029b      	lsls	r3, r3, #10
 8006280:	b29b      	uxth	r3, r3
 8006282:	4313      	orrs	r3, r2
 8006284:	b29a      	uxth	r2, r3
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	e024      	b.n	80062d6 <USB_EPStartXfer+0x8a8>
 800628c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d11c      	bne.n	80062d6 <USB_EPStartXfer+0x8a8>
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b0:	4413      	add	r3, r2
 80062b2:	643b      	str	r3, [r7, #64]	; 0x40
 80062b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	00da      	lsls	r2, r3, #3
 80062c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	895b      	ldrh	r3, [r3, #10]
 80062e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6959      	ldr	r1, [r3, #20]
 80062f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006300:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006304:	6800      	ldr	r0, [r0, #0]
 8006306:	f001 f87d 	bl	8007404 <USB_WritePMA>
 800630a:	e227      	b.n	800675c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800630c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800631c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	b29b      	uxth	r3, r3
 800633a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800633e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006342:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	441a      	add	r2, r3
 8006360:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006398:	4413      	add	r3, r2
 800639a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00da      	lsls	r2, r3, #3
 80063aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	891b      	ldrh	r3, [r3, #8]
 80063ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6959      	ldr	r1, [r3, #20]
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	f001 f809 	bl	8007404 <USB_WritePMA>
 80063f2:	e1b3      	b.n	800675c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006404:	1ad2      	subs	r2, r2, r3
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80c6 	beq.w	80065c6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800643a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	673b      	str	r3, [r7, #112]	; 0x70
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d177      	bne.n	8006546 <USB_EPStartXfer+0xb18>
 8006456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	66bb      	str	r3, [r7, #104]	; 0x68
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006470:	b29b      	uxth	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006476:	4413      	add	r3, r2
 8006478:	66bb      	str	r3, [r7, #104]	; 0x68
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	00da      	lsls	r2, r3, #3
 8006488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800648a:	4413      	add	r3, r2
 800648c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006490:	667b      	str	r3, [r7, #100]	; 0x64
 8006492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800649c:	b29a      	uxth	r2, r3
 800649e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a6:	2b3e      	cmp	r3, #62	; 0x3e
 80064a8:	d921      	bls.n	80064ee <USB_EPStartXfer+0xac0>
 80064aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <USB_EPStartXfer+0xa9c>
 80064c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064c4:	3b01      	subs	r3, #1
 80064c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	029b      	lsls	r3, r3, #10
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4313      	orrs	r3, r2
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	e050      	b.n	8006590 <USB_EPStartXfer+0xb62>
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <USB_EPStartXfer+0xade>
 80064f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006504:	b29a      	uxth	r2, r3
 8006506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e041      	b.n	8006590 <USB_EPStartXfer+0xb62>
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <USB_EPStartXfer+0xafe>
 8006522:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006526:	3301      	adds	r3, #1
 8006528:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800652c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29a      	uxth	r2, r3
 8006532:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006536:	b29b      	uxth	r3, r3
 8006538:	029b      	lsls	r3, r3, #10
 800653a:	b29b      	uxth	r3, r3
 800653c:	4313      	orrs	r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e024      	b.n	8006590 <USB_EPStartXfer+0xb62>
 8006546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d11c      	bne.n	8006590 <USB_EPStartXfer+0xb62>
 8006556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006564:	b29b      	uxth	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800656a:	4413      	add	r3, r2
 800656c:	673b      	str	r3, [r7, #112]	; 0x70
 800656e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	00da      	lsls	r2, r3, #3
 800657c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800657e:	4413      	add	r3, r2
 8006580:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658a:	b29a      	uxth	r2, r3
 800658c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	895b      	ldrh	r3, [r3, #10]
 800659c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6959      	ldr	r1, [r3, #20]
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065be:	6800      	ldr	r0, [r0, #0]
 80065c0:	f000 ff20 	bl	8007404 <USB_WritePMA>
 80065c4:	e0ca      	b.n	800675c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d177      	bne.n	80066c6 <USB_EPStartXfer+0xc98>
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065f6:	4413      	add	r3, r2
 80065f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	00da      	lsls	r2, r3, #3
 8006608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800660a:	4413      	add	r3, r2
 800660c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006610:	67bb      	str	r3, [r7, #120]	; 0x78
 8006612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800661c:	b29a      	uxth	r2, r3
 800661e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006626:	2b3e      	cmp	r3, #62	; 0x3e
 8006628:	d921      	bls.n	800666e <USB_EPStartXfer+0xc40>
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <USB_EPStartXfer+0xc1c>
 8006640:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006644:	3b01      	subs	r3, #1
 8006646:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800664a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29a      	uxth	r2, r3
 8006650:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006654:	b29b      	uxth	r3, r3
 8006656:	029b      	lsls	r3, r3, #10
 8006658:	b29b      	uxth	r3, r3
 800665a:	4313      	orrs	r3, r2
 800665c:	b29b      	uxth	r3, r3
 800665e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006666:	b29a      	uxth	r2, r3
 8006668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	e05c      	b.n	8006728 <USB_EPStartXfer+0xcfa>
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <USB_EPStartXfer+0xc5e>
 8006676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006684:	b29a      	uxth	r2, r3
 8006686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e04d      	b.n	8006728 <USB_EPStartXfer+0xcfa>
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <USB_EPStartXfer+0xc7e>
 80066a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066a6:	3301      	adds	r3, #1
 80066a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	029b      	lsls	r3, r3, #10
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	e030      	b.n	8006728 <USB_EPStartXfer+0xcfa>
 80066c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d128      	bne.n	8006728 <USB_EPStartXfer+0xcfa>
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066fa:	4413      	add	r3, r2
 80066fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	00da      	lsls	r2, r3, #3
 800670e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006712:	4413      	add	r3, r2
 8006714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006726:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	891b      	ldrh	r3, [r3, #8]
 8006734:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6959      	ldr	r1, [r3, #20]
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006748:	b29b      	uxth	r3, r3
 800674a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800674e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006752:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006756:	6800      	ldr	r0, [r0, #0]
 8006758:	f000 fe54 	bl	8007404 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800675c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006782:	817b      	strh	r3, [r7, #10]
 8006784:	897b      	ldrh	r3, [r7, #10]
 8006786:	f083 0310 	eor.w	r3, r3, #16
 800678a:	817b      	strh	r3, [r7, #10]
 800678c:	897b      	ldrh	r3, [r7, #10]
 800678e:	f083 0320 	eor.w	r3, r3, #32
 8006792:	817b      	strh	r3, [r7, #10]
 8006794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	441a      	add	r2, r3
 80067ae:	897b      	ldrh	r3, [r7, #10]
 80067b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	8013      	strh	r3, [r2, #0]
 80067c4:	f000 bcde 	b.w	8007184 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	7b1b      	ldrb	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f040 80bb 	bne.w	8006950 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d917      	bls.n	8006826 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006816:	1ad2      	subs	r2, r2, r3
 8006818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	619a      	str	r2, [r3, #24]
 8006824:	e00e      	b.n	8006844 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2200      	movs	r2, #0
 8006842:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006860:	b29b      	uxth	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006868:	4413      	add	r3, r2
 800686a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800686e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	00da      	lsls	r2, r3, #3
 800687c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006880:	4413      	add	r3, r2
 8006882:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800688a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a2:	2b3e      	cmp	r3, #62	; 0x3e
 80068a4:	d924      	bls.n	80068f0 <USB_EPStartXfer+0xec2>
 80068a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <USB_EPStartXfer+0xe98>
 80068bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068c0:	3b01      	subs	r3, #1
 80068c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	4313      	orrs	r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	f000 bc10 	b.w	8007110 <USB_EPStartXfer+0x16e2>
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <USB_EPStartXfer+0xee4>
 80068f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006908:	b29a      	uxth	r2, r3
 800690a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800690e:	801a      	strh	r2, [r3, #0]
 8006910:	e3fe      	b.n	8007110 <USB_EPStartXfer+0x16e2>
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <USB_EPStartXfer+0xf04>
 8006928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800692c:	3301      	adds	r3, #1
 800692e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29a      	uxth	r2, r3
 800693a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800693e:	b29b      	uxth	r3, r3
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	b29b      	uxth	r3, r3
 8006944:	4313      	orrs	r3, r2
 8006946:	b29a      	uxth	r2, r3
 8006948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e3df      	b.n	8007110 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	78db      	ldrb	r3, [r3, #3]
 800695c:	2b02      	cmp	r3, #2
 800695e:	f040 8218 	bne.w	8006d92 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 809d 	bne.w	8006aae <USB_EPStartXfer+0x1080>
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006990:	b29b      	uxth	r3, r3
 8006992:	461a      	mov	r2, r3
 8006994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006998:	4413      	add	r3, r2
 800699a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800699e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	00da      	lsls	r2, r3, #3
 80069ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069b0:	4413      	add	r3, r2
 80069b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069cc:	801a      	strh	r2, [r3, #0]
 80069ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b3e      	cmp	r3, #62	; 0x3e
 80069dc:	d92b      	bls.n	8006a36 <USB_EPStartXfer+0x1008>
 80069de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <USB_EPStartXfer+0xfe0>
 8006a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	e070      	b.n	8006b18 <USB_EPStartXfer+0x10ea>
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10c      	bne.n	8006a60 <USB_EPStartXfer+0x1032>
 8006a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	e05b      	b.n	8006b18 <USB_EPStartXfer+0x10ea>
 8006a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <USB_EPStartXfer+0x1062>
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	029b      	lsls	r3, r3, #10
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e034      	b.n	8006b18 <USB_EPStartXfer+0x10ea>
 8006aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d12c      	bne.n	8006b18 <USB_EPStartXfer+0x10ea>
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	00da      	lsls	r2, r3, #3
 8006af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 809d 	bne.w	8006c72 <USB_EPStartXfer+0x1244>
 8006b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	00da      	lsls	r2, r3, #3
 8006b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b74:	4413      	add	r3, r2
 8006b76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006ba0:	d92b      	bls.n	8006bfa <USB_EPStartXfer+0x11cc>
 8006ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <USB_EPStartXfer+0x11a4>
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	029b      	lsls	r3, r3, #10
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4313      	orrs	r3, r2
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e069      	b.n	8006cce <USB_EPStartXfer+0x12a0>
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10c      	bne.n	8006c24 <USB_EPStartXfer+0x11f6>
 8006c0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	e054      	b.n	8006cce <USB_EPStartXfer+0x12a0>
 8006c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <USB_EPStartXfer+0x1226>
 8006c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4e:	3301      	adds	r3, #1
 8006c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	029b      	lsls	r3, r3, #10
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4313      	orrs	r3, r2
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e02d      	b.n	8006cce <USB_EPStartXfer+0x12a0>
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d125      	bne.n	8006cce <USB_EPStartXfer+0x12a0>
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c98:	4413      	add	r3, r2
 8006c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	00da      	lsls	r2, r3, #3
 8006cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ccc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8218 	beq.w	8007110 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <USB_EPStartXfer+0x12ea>
 8006d0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10d      	bne.n	8006d34 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f040 81f5 	bne.w	8007110 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f040 81ee 	bne.w	8007110 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	441a      	add	r2, r3
 8006d78:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8013      	strh	r3, [r2, #0]
 8006d90:	e1be      	b.n	8007110 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	78db      	ldrb	r3, [r3, #3]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f040 81b4 	bne.w	800710c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	699a      	ldr	r2, [r3, #24]
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d917      	bls.n	8006df0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de0:	1ad2      	subs	r2, r2, r3
 8006de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	619a      	str	r2, [r3, #24]
 8006dee:	e00e      	b.n	8006e0e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 8085 	bne.w	8006f2a <USB_EPStartXfer+0x14fc>
 8006e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e44:	4413      	add	r3, r2
 8006e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	00da      	lsls	r2, r3, #3
 8006e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e80:	d923      	bls.n	8006eca <USB_EPStartXfer+0x149c>
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <USB_EPStartXfer+0x1474>
 8006e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	029b      	lsls	r3, r3, #10
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ec6:	801a      	strh	r2, [r3, #0]
 8006ec8:	e060      	b.n	8006f8c <USB_EPStartXfer+0x155e>
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10c      	bne.n	8006eec <USB_EPStartXfer+0x14be>
 8006ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	e04f      	b.n	8006f8c <USB_EPStartXfer+0x155e>
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <USB_EPStartXfer+0x14de>
 8006f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f06:	3301      	adds	r3, #1
 8006f08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	029b      	lsls	r3, r3, #10
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	e030      	b.n	8006f8c <USB_EPStartXfer+0x155e>
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d128      	bne.n	8006f8c <USB_EPStartXfer+0x155e>
 8006f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f5e:	4413      	add	r3, r2
 8006f60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	00da      	lsls	r2, r3, #3
 8006f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f040 8085 	bne.w	80070b6 <USB_EPStartXfer+0x1688>
 8006fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	00da      	lsls	r2, r3, #3
 8006fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fe8:	4413      	add	r3, r2
 8006fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700a:	2b3e      	cmp	r3, #62	; 0x3e
 800700c:	d923      	bls.n	8007056 <USB_EPStartXfer+0x1628>
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <USB_EPStartXfer+0x1600>
 8007024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007028:	3b01      	subs	r3, #1
 800702a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800702e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29a      	uxth	r2, r3
 8007036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800703a:	b29b      	uxth	r3, r3
 800703c:	029b      	lsls	r3, r3, #10
 800703e:	b29b      	uxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b29b      	uxth	r3, r3
 8007044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704c:	b29a      	uxth	r2, r3
 800704e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	e05c      	b.n	8007110 <USB_EPStartXfer+0x16e2>
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <USB_EPStartXfer+0x164a>
 800705e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706e:	b29a      	uxth	r2, r3
 8007070:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	e04b      	b.n	8007110 <USB_EPStartXfer+0x16e2>
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <USB_EPStartXfer+0x166a>
 800708e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007092:	3301      	adds	r3, #1
 8007094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29a      	uxth	r2, r3
 80070a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	029b      	lsls	r3, r3, #10
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	e02c      	b.n	8007110 <USB_EPStartXfer+0x16e2>
 80070b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d124      	bne.n	8007110 <USB_EPStartXfer+0x16e2>
 80070c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070dc:	4413      	add	r3, r2
 80070de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	00da      	lsls	r2, r3, #3
 80070f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070f4:	4413      	add	r3, r2
 80070f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007102:	b29a      	uxth	r2, r3
 8007104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007108:	801a      	strh	r2, [r3, #0]
 800710a:	e001      	b.n	8007110 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e03a      	b.n	8007186 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007136:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800713a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800713e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007142:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007146:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800714a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800714e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007180:	b29b      	uxth	r3, r3
 8007182:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d020      	beq.n	80071e4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b8:	81bb      	strh	r3, [r7, #12]
 80071ba:	89bb      	ldrh	r3, [r7, #12]
 80071bc:	f083 0310 	eor.w	r3, r3, #16
 80071c0:	81bb      	strh	r3, [r7, #12]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	441a      	add	r2, r3
 80071cc:	89bb      	ldrh	r3, [r7, #12]
 80071ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071de:	b29b      	uxth	r3, r3
 80071e0:	8013      	strh	r3, [r2, #0]
 80071e2:	e01f      	b.n	8007224 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fa:	81fb      	strh	r3, [r7, #14]
 80071fc:	89fb      	ldrh	r3, [r7, #14]
 80071fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007202:	81fb      	strh	r3, [r7, #14]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	89fb      	ldrh	r3, [r7, #14]
 8007210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007220:	b29b      	uxth	r3, r3
 8007222:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	7b1b      	ldrb	r3, [r3, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 809d 	bne.w	8007380 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d04c      	beq.n	80072e8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	823b      	strh	r3, [r7, #16]
 800725c:	8a3b      	ldrh	r3, [r7, #16]
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d01b      	beq.n	800729e <USB_EPClearStall+0x6c>
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727c:	81fb      	strh	r3, [r7, #14]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	441a      	add	r2, r3
 8007288:	89fb      	ldrh	r3, [r7, #14]
 800728a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800728e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800729a:	b29b      	uxth	r3, r3
 800729c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d06c      	beq.n	8007380 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072bc:	81bb      	strh	r3, [r7, #12]
 80072be:	89bb      	ldrh	r3, [r7, #12]
 80072c0:	f083 0320 	eor.w	r3, r3, #32
 80072c4:	81bb      	strh	r3, [r7, #12]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	441a      	add	r2, r3
 80072d0:	89bb      	ldrh	r3, [r7, #12]
 80072d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	8013      	strh	r3, [r2, #0]
 80072e6:	e04b      	b.n	8007380 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	82fb      	strh	r3, [r7, #22]
 80072f6:	8afb      	ldrh	r3, [r7, #22]
 80072f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <USB_EPClearStall+0x106>
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	82bb      	strh	r3, [r7, #20]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	8abb      	ldrh	r3, [r7, #20]
 8007324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800734a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734e:	827b      	strh	r3, [r7, #18]
 8007350:	8a7b      	ldrh	r3, [r7, #18]
 8007352:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007356:	827b      	strh	r3, [r7, #18]
 8007358:	8a7b      	ldrh	r3, [r7, #18]
 800735a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800735e:	827b      	strh	r3, [r7, #18]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	8a7b      	ldrh	r3, [r7, #18]
 800736c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737c:	b29b      	uxth	r3, r3
 800737e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2280      	movs	r2, #128	; 0x80
 80073a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80073f6:	68fb      	ldr	r3, [r7, #12]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007404:	b480      	push	{r7}
 8007406:	b08b      	sub	sp, #44	; 0x2c
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	4611      	mov	r1, r2
 8007410:	461a      	mov	r2, r3
 8007412:	460b      	mov	r3, r1
 8007414:	80fb      	strh	r3, [r7, #6]
 8007416:	4613      	mov	r3, r2
 8007418:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800741a:	88bb      	ldrh	r3, [r7, #4]
 800741c:	3301      	adds	r3, #1
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007434:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
 800743a:	e01b      	b.n	8007474 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	3301      	adds	r3, #1
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	b21a      	sxth	r2, r3
 800744c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007450:	4313      	orrs	r3, r2
 8007452:	b21b      	sxth	r3, r3
 8007454:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	8a7a      	ldrh	r2, [r7, #18]
 800745a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	3302      	adds	r3, #2
 8007460:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	3301      	adds	r3, #1
 8007466:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	3301      	adds	r3, #1
 800746c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	3b01      	subs	r3, #1
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e0      	bne.n	800743c <USB_WritePMA+0x38>
  }
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	372c      	adds	r7, #44	; 0x2c
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007488:	b480      	push	{r7}
 800748a:	b08b      	sub	sp, #44	; 0x2c
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4611      	mov	r1, r2
 8007494:	461a      	mov	r2, r3
 8007496:	460b      	mov	r3, r1
 8007498:	80fb      	strh	r3, [r7, #6]
 800749a:	4613      	mov	r3, r2
 800749c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800749e:	88bb      	ldrh	r3, [r7, #4]
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
 80074be:	e018      	b.n	80074f2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	3302      	adds	r3, #2
 80074cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	3301      	adds	r3, #1
 80074da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	3301      	adds	r3, #1
 80074ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	3b01      	subs	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e3      	bne.n	80074c0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80074f8:	88bb      	ldrh	r3, [r7, #4]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	b2da      	uxtb	r2, r3
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	701a      	strb	r2, [r3, #0]
  }
}
 8007514:	bf00      	nop
 8007516:	372c      	adds	r7, #44	; 0x2c
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800752c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007530:	f002 f8a6 	bl	8009680 <USBD_static_malloc>
 8007534:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d105      	bne.n	8007548 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007544:	2302      	movs	r3, #2
 8007546:	e066      	b.n	8007616 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	7c1b      	ldrb	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d119      	bne.n	800758c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755c:	2202      	movs	r2, #2
 800755e:	2181      	movs	r1, #129	; 0x81
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 ff34 	bl	80093ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800756c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007570:	2202      	movs	r2, #2
 8007572:	2101      	movs	r1, #1
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 ff2a 	bl	80093ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2210      	movs	r2, #16
 8007586:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800758a:	e016      	b.n	80075ba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	2202      	movs	r2, #2
 8007590:	2181      	movs	r1, #129	; 0x81
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 ff1b 	bl	80093ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800759e:	2340      	movs	r3, #64	; 0x40
 80075a0:	2202      	movs	r2, #2
 80075a2:	2101      	movs	r1, #1
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 ff12 	bl	80093ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2210      	movs	r2, #16
 80075b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075ba:	2308      	movs	r3, #8
 80075bc:	2203      	movs	r2, #3
 80075be:	2182      	movs	r1, #130	; 0x82
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 ff04 	bl	80093ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7c1b      	ldrb	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d109      	bne.n	8007604 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075fa:	2101      	movs	r1, #1
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 ffd5 	bl	80095ac <USBD_LL_PrepareReceive>
 8007602:	e007      	b.n	8007614 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800760a:	2340      	movs	r3, #64	; 0x40
 800760c:	2101      	movs	r1, #1
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 ffcc 	bl	80095ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800762a:	2181      	movs	r1, #129	; 0x81
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 fef4 	bl	800941a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007638:	2101      	movs	r1, #1
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 feed 	bl	800941a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007648:	2182      	movs	r1, #130	; 0x82
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 fee5 	bl	800941a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00e      	beq.n	8007688 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800767a:	4618      	mov	r0, r3
 800767c:	f002 f80e 	bl	800969c <USBD_static_free>
    pdev->pClassData = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e0af      	b.n	800781c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d03f      	beq.n	8007748 <USBD_CDC_Setup+0xb4>
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	f040 809f 	bne.w	800780c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88db      	ldrh	r3, [r3, #6]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d02e      	beq.n	8007734 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b25b      	sxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da16      	bge.n	800770e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80076ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	88d2      	ldrh	r2, [r2, #6]
 80076f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	88db      	ldrh	r3, [r3, #6]
 80076f8:	2b07      	cmp	r3, #7
 80076fa:	bf28      	it	cs
 80076fc:	2307      	movcs	r3, #7
 80076fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	89fa      	ldrh	r2, [r7, #14]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 fa9f 	bl	8008c4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800770c:	e085      	b.n	800781a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	785a      	ldrb	r2, [r3, #1]
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	88db      	ldrh	r3, [r3, #6]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007724:	6939      	ldr	r1, [r7, #16]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	88db      	ldrh	r3, [r3, #6]
 800772a:	461a      	mov	r2, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fab8 	bl	8008ca2 <USBD_CtlPrepareRx>
      break;
 8007732:	e072      	b.n	800781a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	7850      	ldrb	r0, [r2, #1]
 8007740:	2200      	movs	r2, #0
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	4798      	blx	r3
      break;
 8007746:	e068      	b.n	800781a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	2b0b      	cmp	r3, #11
 800774e:	d852      	bhi.n	80077f6 <USBD_CDC_Setup+0x162>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <USBD_CDC_Setup+0xc4>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007789 	.word	0x08007789
 800775c:	08007805 	.word	0x08007805
 8007760:	080077f7 	.word	0x080077f7
 8007764:	080077f7 	.word	0x080077f7
 8007768:	080077f7 	.word	0x080077f7
 800776c:	080077f7 	.word	0x080077f7
 8007770:	080077f7 	.word	0x080077f7
 8007774:	080077f7 	.word	0x080077f7
 8007778:	080077f7 	.word	0x080077f7
 800777c:	080077f7 	.word	0x080077f7
 8007780:	080077b3 	.word	0x080077b3
 8007784:	080077dd 	.word	0x080077dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b03      	cmp	r3, #3
 8007792:	d107      	bne.n	80077a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007794:	f107 030a 	add.w	r3, r7, #10
 8007798:	2202      	movs	r2, #2
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 fa54 	bl	8008c4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077a2:	e032      	b.n	800780a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 f9de 	bl	8008b68 <USBD_CtlError>
            ret = USBD_FAIL;
 80077ac:	2303      	movs	r3, #3
 80077ae:	75fb      	strb	r3, [r7, #23]
          break;
 80077b0:	e02b      	b.n	800780a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d107      	bne.n	80077ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077be:	f107 030d 	add.w	r3, r7, #13
 80077c2:	2201      	movs	r2, #1
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 fa3f 	bl	8008c4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077cc:	e01d      	b.n	800780a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f9c9 	bl	8008b68 <USBD_CtlError>
            ret = USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	75fb      	strb	r3, [r7, #23]
          break;
 80077da:	e016      	b.n	800780a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d00f      	beq.n	8007808 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 f9bc 	bl	8008b68 <USBD_CtlError>
            ret = USBD_FAIL;
 80077f0:	2303      	movs	r3, #3
 80077f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077f4:	e008      	b.n	8007808 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 f9b5 	bl	8008b68 <USBD_CtlError>
          ret = USBD_FAIL;
 80077fe:	2303      	movs	r3, #3
 8007800:	75fb      	strb	r3, [r7, #23]
          break;
 8007802:	e002      	b.n	800780a <USBD_CDC_Setup+0x176>
          break;
 8007804:	bf00      	nop
 8007806:	e008      	b.n	800781a <USBD_CDC_Setup+0x186>
          break;
 8007808:	bf00      	nop
      }
      break;
 800780a:	e006      	b.n	800781a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 f9aa 	bl	8008b68 <USBD_CtlError>
      ret = USBD_FAIL;
 8007814:	2303      	movs	r3, #3
 8007816:	75fb      	strb	r3, [r7, #23]
      break;
 8007818:	bf00      	nop
  }

  return (uint8_t)ret;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007836:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007842:	2303      	movs	r3, #3
 8007844:	e04f      	b.n	80078e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	3318      	adds	r3, #24
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d029      	beq.n	80078b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	3318      	adds	r3, #24
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	78f9      	ldrb	r1, [r7, #3]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	460b      	mov	r3, r1
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	4403      	add	r3, r0
 8007884:	3320      	adds	r3, #32
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	fbb2 f1f3 	udiv	r1, r2, r3
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007892:	2b00      	cmp	r3, #0
 8007894:	d110      	bne.n	80078b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007896:	78fa      	ldrb	r2, [r7, #3]
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	3318      	adds	r3, #24
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078aa:	78f9      	ldrb	r1, [r7, #3]
 80078ac:	2300      	movs	r3, #0
 80078ae:	2200      	movs	r2, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 fe5a 	bl	800956a <USBD_LL_Transmit>
 80078b6:	e015      	b.n	80078e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007900:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800790c:	2303      	movs	r3, #3
 800790e:	e015      	b.n	800793c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 fe6a 	bl	80095ee <USBD_LL_GetRxDataSize>
 800791a:	4602      	mov	r2, r0
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007936:	4611      	mov	r1, r2
 8007938:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007952:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800795a:	2303      	movs	r3, #3
 800795c:	e01b      	b.n	8007996 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d015      	beq.n	8007994 <USBD_CDC_EP0_RxReady+0x50>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800796e:	2bff      	cmp	r3, #255	; 0xff
 8007970:	d010      	beq.n	8007994 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007980:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007988:	b292      	uxth	r2, r2
 800798a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	22ff      	movs	r2, #255	; 0xff
 8007990:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2243      	movs	r2, #67	; 0x43
 80079ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80079ae:	4b03      	ldr	r3, [pc, #12]	; (80079bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	20000094 	.word	0x20000094

080079c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2243      	movs	r2, #67	; 0x43
 80079cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80079ce:	4b03      	ldr	r3, [pc, #12]	; (80079dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	20000050 	.word	0x20000050

080079e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2243      	movs	r2, #67	; 0x43
 80079ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80079ee:	4b03      	ldr	r3, [pc, #12]	; (80079fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	200000d8 	.word	0x200000d8

08007a00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	220a      	movs	r2, #10
 8007a0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a0e:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	2000000c 	.word	0x2000000c

08007a20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e004      	b.n	8007a3e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b087      	sub	sp, #28
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a5c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e008      	b.n	8007a7a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e004      	b.n	8007aac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e016      	b.n	8007b04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7c1b      	ldrb	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ae8:	2101      	movs	r1, #1
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 fd5e 	bl	80095ac <USBD_LL_PrepareReceive>
 8007af0:	e007      	b.n	8007b02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007af8:	2340      	movs	r3, #64	; 0x40
 8007afa:	2101      	movs	r1, #1
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 fd55 	bl	80095ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e01f      	b.n	8007b64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f001 fbbd 	bl	80092d8 <USBD_LL_Init>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e016      	b.n	8007bb2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	f107 020e 	add.w	r2, r7, #14
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	4602      	mov	r2, r0
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fbe8 	bl	8009398 <USBD_LL_Start>
 8007bc8:	4603      	mov	r3, r0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	78fa      	ldrb	r2, [r7, #3]
 8007c40:	4611      	mov	r1, r2
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
  }

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 ff46 	bl	8008af4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c84:	f003 031f 	and.w	r3, r3, #31
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d01a      	beq.n	8007cc2 <USBD_LL_SetupStage+0x72>
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d822      	bhi.n	8007cd6 <USBD_LL_SetupStage+0x86>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <USBD_LL_SetupStage+0x4a>
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d00a      	beq.n	8007cae <USBD_LL_SetupStage+0x5e>
 8007c98:	e01d      	b.n	8007cd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9ee 	bl	8008084 <USBD_StdDevReq>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cac:	e020      	b.n	8007cf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa52 	bl	8008160 <USBD_StdItfReq>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc0:	e016      	b.n	8007cf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa91 	bl	80081f2 <USBD_StdEPReq>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd4:	e00c      	b.n	8007cf0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fbb7 	bl	8009458 <USBD_LL_StallEP>
 8007cea:	4603      	mov	r3, r0
 8007cec:	73fb      	strb	r3, [r7, #15]
      break;
 8007cee:	bf00      	nop
  }

  return ret;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	460b      	mov	r3, r1
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d138      	bne.n	8007d80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d14a      	bne.n	8007db6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d913      	bls.n	8007d54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	1ad2      	subs	r2, r2, r3
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	4293      	cmp	r3, r2
 8007d44:	bf28      	it	cs
 8007d46:	4613      	movcs	r3, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 ffc5 	bl	8008cdc <USBD_CtlContinueRx>
 8007d52:	e030      	b.n	8007db6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d10b      	bne.n	8007d78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 ffc0 	bl	8008cfe <USBD_CtlSendStatus>
 8007d7e:	e01a      	b.n	8007db6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d114      	bne.n	8007db6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	7afa      	ldrb	r2, [r7, #11]
 8007da2:	4611      	mov	r1, r2
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	4798      	blx	r3
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	e000      	b.n	8007db8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d16b      	bne.n	8007eac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3314      	adds	r3, #20
 8007dd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d156      	bne.n	8007e92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d914      	bls.n	8007e1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	1ad2      	subs	r2, r2, r3
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	461a      	mov	r2, r3
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 ff3a 	bl	8008c80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f001 fbca 	bl	80095ac <USBD_LL_PrepareReceive>
 8007e18:	e03b      	b.n	8007e92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d11c      	bne.n	8007e60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d316      	bcc.n	8007e60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d20f      	bcs.n	8007e60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e40:	2200      	movs	r2, #0
 8007e42:	2100      	movs	r1, #0
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 ff1b 	bl	8008c80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e52:	2300      	movs	r3, #0
 8007e54:	2200      	movs	r2, #0
 8007e56:	2100      	movs	r1, #0
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f001 fba7 	bl	80095ac <USBD_LL_PrepareReceive>
 8007e5e:	e018      	b.n	8007e92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d10b      	bne.n	8007e84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e84:	2180      	movs	r1, #128	; 0x80
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f001 fae6 	bl	8009458 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 ff49 	bl	8008d24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d122      	bne.n	8007ee2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff fe98 	bl	8007bd2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007eaa:	e01a      	b.n	8007ee2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d114      	bne.n	8007ee2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00e      	beq.n	8007ee2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	7afa      	ldrb	r2, [r7, #11]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	4798      	blx	r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	e000      	b.n	8007ee4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e02f      	b.n	8007f80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6852      	ldr	r2, [r2, #4]
 8007f42:	b2d2      	uxtb	r2, r2
 8007f44:	4611      	mov	r1, r2
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f4a:	2340      	movs	r3, #64	; 0x40
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2100      	movs	r1, #0
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 fa3c 	bl	80093ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2240      	movs	r2, #64	; 0x40
 8007f62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f66:	2340      	movs	r3, #64	; 0x40
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2180      	movs	r1, #128	; 0x80
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 fa2e 	bl	80093ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2240      	movs	r2, #64	; 0x40
 8007f7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d106      	bne.n	8007ff6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008016:	2303      	movs	r3, #3
 8008018:	e012      	b.n	8008040 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d10b      	bne.n	800803e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	3301      	adds	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008066:	8a3b      	ldrh	r3, [r7, #16]
 8008068:	021b      	lsls	r3, r3, #8
 800806a:	b21a      	sxth	r2, r3
 800806c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008070:	4313      	orrs	r3, r2
 8008072:	b21b      	sxth	r3, r3
 8008074:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008076:	89fb      	ldrh	r3, [r7, #14]
}
 8008078:	4618      	mov	r0, r3
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d005      	beq.n	80080aa <USBD_StdDevReq+0x26>
 800809e:	2b40      	cmp	r3, #64	; 0x40
 80080a0:	d853      	bhi.n	800814a <USBD_StdDevReq+0xc6>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <USBD_StdDevReq+0x3a>
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d14f      	bne.n	800814a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	4798      	blx	r3
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	e04a      	b.n	8008154 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	d83b      	bhi.n	800813e <USBD_StdDevReq+0xba>
 80080c6:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <USBD_StdDevReq+0x48>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	08008121 	.word	0x08008121
 80080d0:	08008135 	.word	0x08008135
 80080d4:	0800813f 	.word	0x0800813f
 80080d8:	0800812b 	.word	0x0800812b
 80080dc:	0800813f 	.word	0x0800813f
 80080e0:	080080ff 	.word	0x080080ff
 80080e4:	080080f5 	.word	0x080080f5
 80080e8:	0800813f 	.word	0x0800813f
 80080ec:	08008117 	.word	0x08008117
 80080f0:	08008109 	.word	0x08008109
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f9de 	bl	80084b8 <USBD_GetDescriptor>
          break;
 80080fc:	e024      	b.n	8008148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fb6d 	bl	80087e0 <USBD_SetAddress>
          break;
 8008106:	e01f      	b.n	8008148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fbac 	bl	8008868 <USBD_SetConfig>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
          break;
 8008114:	e018      	b.n	8008148 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fc4b 	bl	80089b4 <USBD_GetConfig>
          break;
 800811e:	e013      	b.n	8008148 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fc7c 	bl	8008a20 <USBD_GetStatus>
          break;
 8008128:	e00e      	b.n	8008148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fcab 	bl	8008a88 <USBD_SetFeature>
          break;
 8008132:	e009      	b.n	8008148 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fcba 	bl	8008ab0 <USBD_ClrFeature>
          break;
 800813c:	e004      	b.n	8008148 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fd11 	bl	8008b68 <USBD_CtlError>
          break;
 8008146:	bf00      	nop
      }
      break;
 8008148:	e004      	b.n	8008154 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fd0b 	bl	8008b68 <USBD_CtlError>
      break;
 8008152:	bf00      	nop
  }

  return ret;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop

08008160 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008176:	2b40      	cmp	r3, #64	; 0x40
 8008178:	d005      	beq.n	8008186 <USBD_StdItfReq+0x26>
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d82f      	bhi.n	80081de <USBD_StdItfReq+0x7e>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <USBD_StdItfReq+0x26>
 8008182:	2b20      	cmp	r3, #32
 8008184:	d12b      	bne.n	80081de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818c:	b2db      	uxtb	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	2b02      	cmp	r3, #2
 8008192:	d81d      	bhi.n	80081d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	889b      	ldrh	r3, [r3, #4]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b01      	cmp	r3, #1
 800819c:	d813      	bhi.n	80081c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	88db      	ldrh	r3, [r3, #6]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d110      	bne.n	80081da <USBD_StdItfReq+0x7a>
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10d      	bne.n	80081da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fd9d 	bl	8008cfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081c4:	e009      	b.n	80081da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fccd 	bl	8008b68 <USBD_CtlError>
          break;
 80081ce:	e004      	b.n	80081da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fcc8 	bl	8008b68 <USBD_CtlError>
          break;
 80081d8:	e000      	b.n	80081dc <USBD_StdItfReq+0x7c>
          break;
 80081da:	bf00      	nop
      }
      break;
 80081dc:	e004      	b.n	80081e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fcc1 	bl	8008b68 <USBD_CtlError>
      break;
 80081e6:	bf00      	nop
  }

  return ret;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	889b      	ldrh	r3, [r3, #4]
 8008204:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d007      	beq.n	8008222 <USBD_StdEPReq+0x30>
 8008212:	2b40      	cmp	r3, #64	; 0x40
 8008214:	f200 8145 	bhi.w	80084a2 <USBD_StdEPReq+0x2b0>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00c      	beq.n	8008236 <USBD_StdEPReq+0x44>
 800821c:	2b20      	cmp	r3, #32
 800821e:	f040 8140 	bne.w	80084a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	4798      	blx	r3
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
      break;
 8008234:	e13a      	b.n	80084ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	785b      	ldrb	r3, [r3, #1]
 800823a:	2b03      	cmp	r3, #3
 800823c:	d007      	beq.n	800824e <USBD_StdEPReq+0x5c>
 800823e:	2b03      	cmp	r3, #3
 8008240:	f300 8129 	bgt.w	8008496 <USBD_StdEPReq+0x2a4>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d07f      	beq.n	8008348 <USBD_StdEPReq+0x156>
 8008248:	2b01      	cmp	r3, #1
 800824a:	d03c      	beq.n	80082c6 <USBD_StdEPReq+0xd4>
 800824c:	e123      	b.n	8008496 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d002      	beq.n	8008260 <USBD_StdEPReq+0x6e>
 800825a:	2b03      	cmp	r3, #3
 800825c:	d016      	beq.n	800828c <USBD_StdEPReq+0x9a>
 800825e:	e02c      	b.n	80082ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00d      	beq.n	8008282 <USBD_StdEPReq+0x90>
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b80      	cmp	r3, #128	; 0x80
 800826a:	d00a      	beq.n	8008282 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 f8f1 	bl	8009458 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008276:	2180      	movs	r1, #128	; 0x80
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 f8ed 	bl	8009458 <USBD_LL_StallEP>
 800827e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008280:	e020      	b.n	80082c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc6f 	bl	8008b68 <USBD_CtlError>
              break;
 800828a:	e01b      	b.n	80082c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	885b      	ldrh	r3, [r3, #2]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10e      	bne.n	80082b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00b      	beq.n	80082b2 <USBD_StdEPReq+0xc0>
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b80      	cmp	r3, #128	; 0x80
 800829e:	d008      	beq.n	80082b2 <USBD_StdEPReq+0xc0>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	88db      	ldrh	r3, [r3, #6]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 f8d3 	bl	8009458 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fd23 	bl	8008cfe <USBD_CtlSendStatus>

              break;
 80082b8:	e004      	b.n	80082c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fc53 	bl	8008b68 <USBD_CtlError>
              break;
 80082c2:	bf00      	nop
          }
          break;
 80082c4:	e0ec      	b.n	80084a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d002      	beq.n	80082d8 <USBD_StdEPReq+0xe6>
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d016      	beq.n	8008304 <USBD_StdEPReq+0x112>
 80082d6:	e030      	b.n	800833a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00d      	beq.n	80082fa <USBD_StdEPReq+0x108>
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	2b80      	cmp	r3, #128	; 0x80
 80082e2:	d00a      	beq.n	80082fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f8b5 	bl	8009458 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f8b1 	bl	8009458 <USBD_LL_StallEP>
 80082f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082f8:	e025      	b.n	8008346 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fc33 	bl	8008b68 <USBD_CtlError>
              break;
 8008302:	e020      	b.n	8008346 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	885b      	ldrh	r3, [r3, #2]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d11b      	bne.n	8008344 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008312:	2b00      	cmp	r3, #0
 8008314:	d004      	beq.n	8008320 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 f8bb 	bl	8009496 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fcec 	bl	8008cfe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	4798      	blx	r3
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008338:	e004      	b.n	8008344 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fc13 	bl	8008b68 <USBD_CtlError>
              break;
 8008342:	e000      	b.n	8008346 <USBD_StdEPReq+0x154>
              break;
 8008344:	bf00      	nop
          }
          break;
 8008346:	e0ab      	b.n	80084a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d002      	beq.n	800835a <USBD_StdEPReq+0x168>
 8008354:	2b03      	cmp	r3, #3
 8008356:	d032      	beq.n	80083be <USBD_StdEPReq+0x1cc>
 8008358:	e097      	b.n	800848a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d007      	beq.n	8008370 <USBD_StdEPReq+0x17e>
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	2b80      	cmp	r3, #128	; 0x80
 8008364:	d004      	beq.n	8008370 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fbfd 	bl	8008b68 <USBD_CtlError>
                break;
 800836e:	e091      	b.n	8008494 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008374:	2b00      	cmp	r3, #0
 8008376:	da0b      	bge.n	8008390 <USBD_StdEPReq+0x19e>
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800837e:	4613      	mov	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	3310      	adds	r3, #16
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	4413      	add	r3, r2
 800838c:	3304      	adds	r3, #4
 800838e:	e00b      	b.n	80083a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4413      	add	r3, r2
 80083a6:	3304      	adds	r3, #4
 80083a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2202      	movs	r2, #2
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fc47 	bl	8008c4a <USBD_CtlSendData>
              break;
 80083bc:	e06a      	b.n	8008494 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	da11      	bge.n	80083ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	f003 020f 	and.w	r2, r3, #15
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	3324      	adds	r3, #36	; 0x24
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d117      	bne.n	8008410 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fbc0 	bl	8008b68 <USBD_CtlError>
                  break;
 80083e8:	e054      	b.n	8008494 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	f003 020f 	and.w	r2, r3, #15
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d104      	bne.n	8008410 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fbad 	bl	8008b68 <USBD_CtlError>
                  break;
 800840e:	e041      	b.n	8008494 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	da0b      	bge.n	8008430 <USBD_StdEPReq+0x23e>
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	3310      	adds	r3, #16
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	4413      	add	r3, r2
 800842c:	3304      	adds	r3, #4
 800842e:	e00b      	b.n	8008448 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	4413      	add	r3, r2
 8008446:	3304      	adds	r3, #4
 8008448:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <USBD_StdEPReq+0x264>
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d103      	bne.n	800845e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e00e      	b.n	800847c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 f836 	bl	80094d4 <USBD_LL_IsStallEP>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2201      	movs	r2, #1
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	e002      	b.n	800847c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2202      	movs	r2, #2
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fbe1 	bl	8008c4a <USBD_CtlSendData>
              break;
 8008488:	e004      	b.n	8008494 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fb6b 	bl	8008b68 <USBD_CtlError>
              break;
 8008492:	bf00      	nop
          }
          break;
 8008494:	e004      	b.n	80084a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fb65 	bl	8008b68 <USBD_CtlError>
          break;
 800849e:	bf00      	nop
      }
      break;
 80084a0:	e004      	b.n	80084ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fb5f 	bl	8008b68 <USBD_CtlError>
      break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b0e      	cmp	r3, #14
 80084da:	f200 8152 	bhi.w	8008782 <USBD_GetDescriptor+0x2ca>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <USBD_GetDescriptor+0x2c>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008555 	.word	0x08008555
 80084e8:	0800856d 	.word	0x0800856d
 80084ec:	080085ad 	.word	0x080085ad
 80084f0:	08008783 	.word	0x08008783
 80084f4:	08008783 	.word	0x08008783
 80084f8:	08008723 	.word	0x08008723
 80084fc:	0800874f 	.word	0x0800874f
 8008500:	08008783 	.word	0x08008783
 8008504:	08008783 	.word	0x08008783
 8008508:	08008783 	.word	0x08008783
 800850c:	08008783 	.word	0x08008783
 8008510:	08008783 	.word	0x08008783
 8008514:	08008783 	.word	0x08008783
 8008518:	08008783 	.word	0x08008783
 800851c:	08008521 	.word	0x08008521
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7c12      	ldrb	r2, [r2, #16]
 8008538:	f107 0108 	add.w	r1, r7, #8
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008542:	e126      	b.n	8008792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fb0e 	bl	8008b68 <USBD_CtlError>
        err++;
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	3301      	adds	r3, #1
 8008550:	72fb      	strb	r3, [r7, #11]
      break;
 8008552:	e11e      	b.n	8008792 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	7c12      	ldrb	r2, [r2, #16]
 8008560:	f107 0108 	add.w	r1, r7, #8
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	60f8      	str	r0, [r7, #12]
      break;
 800856a:	e112      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7c1b      	ldrb	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10d      	bne.n	8008590 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f107 0208 	add.w	r2, r7, #8
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
 8008584:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3301      	adds	r3, #1
 800858a:	2202      	movs	r2, #2
 800858c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800858e:	e100      	b.n	8008792 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	f107 0208 	add.w	r2, r7, #8
 800859c:	4610      	mov	r0, r2
 800859e:	4798      	blx	r3
 80085a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3301      	adds	r3, #1
 80085a6:	2202      	movs	r2, #2
 80085a8:	701a      	strb	r2, [r3, #0]
      break;
 80085aa:	e0f2      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	885b      	ldrh	r3, [r3, #2]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b05      	cmp	r3, #5
 80085b4:	f200 80ac 	bhi.w	8008710 <USBD_GetDescriptor+0x258>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <USBD_GetDescriptor+0x108>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085d9 	.word	0x080085d9
 80085c4:	0800860d 	.word	0x0800860d
 80085c8:	08008641 	.word	0x08008641
 80085cc:	08008675 	.word	0x08008675
 80085d0:	080086a9 	.word	0x080086a9
 80085d4:	080086dd 	.word	0x080086dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7c12      	ldrb	r2, [r2, #16]
 80085f0:	f107 0108 	add.w	r1, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fa:	e091      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fab2 	bl	8008b68 <USBD_CtlError>
            err++;
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	3301      	adds	r3, #1
 8008608:	72fb      	strb	r3, [r7, #11]
          break;
 800860a:	e089      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862e:	e077      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa98 	bl	8008b68 <USBD_CtlError>
            err++;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	3301      	adds	r3, #1
 800863c:	72fb      	strb	r3, [r7, #11]
          break;
 800863e:	e06f      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008662:	e05d      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa7e 	bl	8008b68 <USBD_CtlError>
            err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
          break;
 8008672:	e055      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	7c12      	ldrb	r2, [r2, #16]
 800868c:	f107 0108 	add.w	r1, r7, #8
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008696:	e043      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa64 	bl	8008b68 <USBD_CtlError>
            err++;
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	3301      	adds	r3, #1
 80086a4:	72fb      	strb	r3, [r7, #11]
          break;
 80086a6:	e03b      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	7c12      	ldrb	r2, [r2, #16]
 80086c0:	f107 0108 	add.w	r1, r7, #8
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ca:	e029      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa4a 	bl	8008b68 <USBD_CtlError>
            err++;
 80086d4:	7afb      	ldrb	r3, [r7, #11]
 80086d6:	3301      	adds	r3, #1
 80086d8:	72fb      	strb	r3, [r7, #11]
          break;
 80086da:	e021      	b.n	8008720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	7c12      	ldrb	r2, [r2, #16]
 80086f4:	f107 0108 	add.w	r1, r7, #8
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
 80086fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086fe:	e00f      	b.n	8008720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa30 	bl	8008b68 <USBD_CtlError>
            err++;
 8008708:	7afb      	ldrb	r3, [r7, #11]
 800870a:	3301      	adds	r3, #1
 800870c:	72fb      	strb	r3, [r7, #11]
          break;
 800870e:	e007      	b.n	8008720 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa28 	bl	8008b68 <USBD_CtlError>
          err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800871e:	bf00      	nop
      }
      break;
 8008720:	e037      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7c1b      	ldrb	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	f107 0208 	add.w	r2, r7, #8
 8008736:	4610      	mov	r0, r2
 8008738:	4798      	blx	r3
 800873a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800873c:	e029      	b.n	8008792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fa11 	bl	8008b68 <USBD_CtlError>
        err++;
 8008746:	7afb      	ldrb	r3, [r7, #11]
 8008748:	3301      	adds	r3, #1
 800874a:	72fb      	strb	r3, [r7, #11]
      break;
 800874c:	e021      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	7c1b      	ldrb	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10d      	bne.n	8008772 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f107 0208 	add.w	r2, r7, #8
 8008762:	4610      	mov	r0, r2
 8008764:	4798      	blx	r3
 8008766:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3301      	adds	r3, #1
 800876c:	2207      	movs	r2, #7
 800876e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008770:	e00f      	b.n	8008792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f9f7 	bl	8008b68 <USBD_CtlError>
        err++;
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	3301      	adds	r3, #1
 800877e:	72fb      	strb	r3, [r7, #11]
      break;
 8008780:	e007      	b.n	8008792 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f9ef 	bl	8008b68 <USBD_CtlError>
      err++;
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	3301      	adds	r3, #1
 800878e:	72fb      	strb	r3, [r7, #11]
      break;
 8008790:	bf00      	nop
  }

  if (err != 0U)
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11e      	bne.n	80087d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	88db      	ldrh	r3, [r3, #6]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d016      	beq.n	80087ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80087a0:	893b      	ldrh	r3, [r7, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00e      	beq.n	80087c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	88da      	ldrh	r2, [r3, #6]
 80087aa:	893b      	ldrh	r3, [r7, #8]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	bf28      	it	cs
 80087b0:	4613      	movcs	r3, r2
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087b6:	893b      	ldrh	r3, [r7, #8]
 80087b8:	461a      	mov	r2, r3
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fa44 	bl	8008c4a <USBD_CtlSendData>
 80087c2:	e009      	b.n	80087d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f9ce 	bl	8008b68 <USBD_CtlError>
 80087cc:	e004      	b.n	80087d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa95 	bl	8008cfe <USBD_CtlSendStatus>
 80087d4:	e000      	b.n	80087d8 <USBD_GetDescriptor+0x320>
    return;
 80087d6:	bf00      	nop
  }
}
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop

080087e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	889b      	ldrh	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d131      	bne.n	8008856 <USBD_SetAddress+0x76>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	88db      	ldrh	r3, [r3, #6]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d12d      	bne.n	8008856 <USBD_SetAddress+0x76>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008800:	d829      	bhi.n	8008856 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800880c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b03      	cmp	r3, #3
 8008818:	d104      	bne.n	8008824 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f9a3 	bl	8008b68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	e01d      	b.n	8008860 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7bfa      	ldrb	r2, [r7, #15]
 8008828:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fe7b 	bl	800952c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa61 	bl	8008cfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d004      	beq.n	800884c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2202      	movs	r2, #2
 8008846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884a:	e009      	b.n	8008860 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008854:	e004      	b.n	8008860 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f985 	bl	8008b68 <USBD_CtlError>
  }
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	885b      	ldrh	r3, [r3, #2]
 800887a:	b2da      	uxtb	r2, r3
 800887c:	4b4c      	ldr	r3, [pc, #304]	; (80089b0 <USBD_SetConfig+0x148>)
 800887e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008880:	4b4b      	ldr	r3, [pc, #300]	; (80089b0 <USBD_SetConfig+0x148>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d905      	bls.n	8008894 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f96c 	bl	8008b68 <USBD_CtlError>
    return USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	e088      	b.n	80089a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d002      	beq.n	80088a6 <USBD_SetConfig+0x3e>
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d025      	beq.n	80088f0 <USBD_SetConfig+0x88>
 80088a4:	e071      	b.n	800898a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088a6:	4b42      	ldr	r3, [pc, #264]	; (80089b0 <USBD_SetConfig+0x148>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d01c      	beq.n	80088e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80088ae:	4b40      	ldr	r3, [pc, #256]	; (80089b0 <USBD_SetConfig+0x148>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088b8:	4b3d      	ldr	r3, [pc, #244]	; (80089b0 <USBD_SetConfig+0x148>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7ff f992 	bl	8007be8 <USBD_SetClassConfig>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f949 	bl	8008b68 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088d6:	e065      	b.n	80089a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fa10 	bl	8008cfe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2203      	movs	r2, #3
 80088e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088e6:	e05d      	b.n	80089a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fa08 	bl	8008cfe <USBD_CtlSendStatus>
      break;
 80088ee:	e059      	b.n	80089a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088f0:	4b2f      	ldr	r3, [pc, #188]	; (80089b0 <USBD_SetConfig+0x148>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d112      	bne.n	800891e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008900:	4b2b      	ldr	r3, [pc, #172]	; (80089b0 <USBD_SetConfig+0x148>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800890a:	4b29      	ldr	r3, [pc, #164]	; (80089b0 <USBD_SetConfig+0x148>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff f985 	bl	8007c20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f9f1 	bl	8008cfe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800891c:	e042      	b.n	80089a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800891e:	4b24      	ldr	r3, [pc, #144]	; (80089b0 <USBD_SetConfig+0x148>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	429a      	cmp	r2, r3
 800892a:	d02a      	beq.n	8008982 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff f973 	bl	8007c20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800893a:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <USBD_SetConfig+0x148>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008944:	4b1a      	ldr	r3, [pc, #104]	; (80089b0 <USBD_SetConfig+0x148>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff f94c 	bl	8007be8 <USBD_SetClassConfig>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00f      	beq.n	800897a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f903 	bl	8008b68 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff f958 	bl	8007c20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008978:	e014      	b.n	80089a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f9bf 	bl	8008cfe <USBD_CtlSendStatus>
      break;
 8008980:	e010      	b.n	80089a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f9bb 	bl	8008cfe <USBD_CtlSendStatus>
      break;
 8008988:	e00c      	b.n	80089a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f8eb 	bl	8008b68 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008992:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <USBD_SetConfig+0x148>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff f941 	bl	8007c20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800899e:	2303      	movs	r3, #3
 80089a0:	73fb      	strb	r3, [r7, #15]
      break;
 80089a2:	bf00      	nop
  }

  return ret;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	200002e8 	.word	0x200002e8

080089b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	88db      	ldrh	r3, [r3, #6]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d004      	beq.n	80089d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f8cd 	bl	8008b68 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089ce:	e023      	b.n	8008a18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	dc02      	bgt.n	80089e2 <USBD_GetConfig+0x2e>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dc03      	bgt.n	80089e8 <USBD_GetConfig+0x34>
 80089e0:	e015      	b.n	8008a0e <USBD_GetConfig+0x5a>
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d00b      	beq.n	80089fe <USBD_GetConfig+0x4a>
 80089e6:	e012      	b.n	8008a0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3308      	adds	r3, #8
 80089f2:	2201      	movs	r2, #1
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f927 	bl	8008c4a <USBD_CtlSendData>
        break;
 80089fc:	e00c      	b.n	8008a18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3304      	adds	r3, #4
 8008a02:	2201      	movs	r2, #1
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f91f 	bl	8008c4a <USBD_CtlSendData>
        break;
 8008a0c:	e004      	b.n	8008a18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f8a9 	bl	8008b68 <USBD_CtlError>
        break;
 8008a16:	bf00      	nop
}
 8008a18:	bf00      	nop
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d81e      	bhi.n	8008a76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	88db      	ldrh	r3, [r3, #6]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d004      	beq.n	8008a4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f890 	bl	8008b68 <USBD_CtlError>
        break;
 8008a48:	e01a      	b.n	8008a80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d005      	beq.n	8008a66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f043 0202 	orr.w	r2, r3, #2
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	330c      	adds	r3, #12
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f8eb 	bl	8008c4a <USBD_CtlSendData>
      break;
 8008a74:	e004      	b.n	8008a80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f875 	bl	8008b68 <USBD_CtlError>
      break;
 8008a7e:	bf00      	nop
  }
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d106      	bne.n	8008aa8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f92b 	bl	8008cfe <USBD_CtlSendStatus>
  }
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d80b      	bhi.n	8008ae0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	885b      	ldrh	r3, [r3, #2]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d10c      	bne.n	8008aea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f910 	bl	8008cfe <USBD_CtlSendStatus>
      }
      break;
 8008ade:	e004      	b.n	8008aea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f840 	bl	8008b68 <USBD_CtlError>
      break;
 8008ae8:	e000      	b.n	8008aec <USBD_ClrFeature+0x3c>
      break;
 8008aea:	bf00      	nop
  }
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	781a      	ldrb	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7ff fa92 	bl	8008048 <SWAPBYTE>
 8008b24:	4603      	mov	r3, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3301      	adds	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7ff fa85 	bl	8008048 <SWAPBYTE>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fa78 	bl	8008048 <SWAPBYTE>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	80da      	strh	r2, [r3, #6]
}
 8008b60:	bf00      	nop
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b72:	2180      	movs	r1, #128	; 0x80
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc6f 	bl	8009458 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fc6b 	bl	8009458 <USBD_LL_StallEP>
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b086      	sub	sp, #24
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d036      	beq.n	8008c0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ba4:	6938      	ldr	r0, [r7, #16]
 8008ba6:	f000 f836 	bl	8008c16 <USBD_GetLen>
 8008baa:	4603      	mov	r3, r0
 8008bac:	3301      	adds	r3, #1
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	7812      	ldrb	r2, [r2, #0]
 8008bc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	4413      	add	r3, r2
 8008bd0:	2203      	movs	r2, #3
 8008bd2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bda:	e013      	b.n	8008c04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	7812      	ldrb	r2, [r2, #0]
 8008be6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	3301      	adds	r3, #1
 8008bec:	613b      	str	r3, [r7, #16]
    idx++;
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	3301      	adds	r3, #1
 8008c02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e7      	bne.n	8008bdc <USBD_GetString+0x52>
 8008c0c:	e000      	b.n	8008c10 <USBD_GetString+0x86>
    return;
 8008c0e:	bf00      	nop
  }
}
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c26:	e005      	b.n	8008c34 <USBD_GetLen+0x1e>
  {
    len++;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	3301      	adds	r3, #1
 8008c32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f5      	bne.n	8008c28 <USBD_GetLen+0x12>
  }

  return len;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	60f8      	str	r0, [r7, #12]
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2202      	movs	r2, #2
 8008c5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fc7a 	bl	800956a <USBD_LL_Transmit>

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	2100      	movs	r1, #0
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 fc69 	bl	800956a <USBD_LL_Transmit>

  return USBD_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	2100      	movs	r1, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fc6d 	bl	80095ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fc5c 	bl	80095ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2204      	movs	r2, #4
 8008d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2200      	movs	r2, #0
 8008d12:	2100      	movs	r1, #0
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc28 	bl	800956a <USBD_LL_Transmit>

  return USBD_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2205      	movs	r2, #5
 8008d30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d34:	2300      	movs	r3, #0
 8008d36:	2200      	movs	r2, #0
 8008d38:	2100      	movs	r1, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fc36 	bl	80095ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008d50:	2200      	movs	r2, #0
 8008d52:	4912      	ldr	r1, [pc, #72]	; (8008d9c <MX_USB_Device_Init+0x50>)
 8008d54:	4812      	ldr	r0, [pc, #72]	; (8008da0 <MX_USB_Device_Init+0x54>)
 8008d56:	f7fe fed9 	bl	8007b0c <USBD_Init>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008d60:	f7f7 fb7c 	bl	800045c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008d64:	490f      	ldr	r1, [pc, #60]	; (8008da4 <MX_USB_Device_Init+0x58>)
 8008d66:	480e      	ldr	r0, [pc, #56]	; (8008da0 <MX_USB_Device_Init+0x54>)
 8008d68:	f7fe ff00 	bl	8007b6c <USBD_RegisterClass>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008d72:	f7f7 fb73 	bl	800045c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008d76:	490c      	ldr	r1, [pc, #48]	; (8008da8 <MX_USB_Device_Init+0x5c>)
 8008d78:	4809      	ldr	r0, [pc, #36]	; (8008da0 <MX_USB_Device_Init+0x54>)
 8008d7a:	f7fe fe51 	bl	8007a20 <USBD_CDC_RegisterInterface>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008d84:	f7f7 fb6a 	bl	800045c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008d88:	4805      	ldr	r0, [pc, #20]	; (8008da0 <MX_USB_Device_Init+0x54>)
 8008d8a:	f7fe ff16 	bl	8007bba <USBD_Start>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008d94:	f7f7 fb62 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008d98:	bf00      	nop
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20000130 	.word	0x20000130
 8008da0:	200002ec 	.word	0x200002ec
 8008da4:	20000018 	.word	0x20000018
 8008da8:	2000011c 	.word	0x2000011c

08008dac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008db0:	2200      	movs	r2, #0
 8008db2:	4905      	ldr	r1, [pc, #20]	; (8008dc8 <CDC_Init_FS+0x1c>)
 8008db4:	4805      	ldr	r0, [pc, #20]	; (8008dcc <CDC_Init_FS+0x20>)
 8008db6:	f7fe fe48 	bl	8007a4a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dba:	4905      	ldr	r1, [pc, #20]	; (8008dd0 <CDC_Init_FS+0x24>)
 8008dbc:	4803      	ldr	r0, [pc, #12]	; (8008dcc <CDC_Init_FS+0x20>)
 8008dbe:	f7fe fe62 	bl	8007a86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	200009bc 	.word	0x200009bc
 8008dcc:	200002ec 	.word	0x200002ec
 8008dd0:	200005bc 	.word	0x200005bc

08008dd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	6039      	str	r1, [r7, #0]
 8008dee:	71fb      	strb	r3, [r7, #7]
 8008df0:	4613      	mov	r3, r2
 8008df2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	2b23      	cmp	r3, #35	; 0x23
 8008df8:	d84a      	bhi.n	8008e90 <CDC_Control_FS+0xac>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <CDC_Control_FS+0x1c>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e91 	.word	0x08008e91
 8008e04:	08008e91 	.word	0x08008e91
 8008e08:	08008e91 	.word	0x08008e91
 8008e0c:	08008e91 	.word	0x08008e91
 8008e10:	08008e91 	.word	0x08008e91
 8008e14:	08008e91 	.word	0x08008e91
 8008e18:	08008e91 	.word	0x08008e91
 8008e1c:	08008e91 	.word	0x08008e91
 8008e20:	08008e91 	.word	0x08008e91
 8008e24:	08008e91 	.word	0x08008e91
 8008e28:	08008e91 	.word	0x08008e91
 8008e2c:	08008e91 	.word	0x08008e91
 8008e30:	08008e91 	.word	0x08008e91
 8008e34:	08008e91 	.word	0x08008e91
 8008e38:	08008e91 	.word	0x08008e91
 8008e3c:	08008e91 	.word	0x08008e91
 8008e40:	08008e91 	.word	0x08008e91
 8008e44:	08008e91 	.word	0x08008e91
 8008e48:	08008e91 	.word	0x08008e91
 8008e4c:	08008e91 	.word	0x08008e91
 8008e50:	08008e91 	.word	0x08008e91
 8008e54:	08008e91 	.word	0x08008e91
 8008e58:	08008e91 	.word	0x08008e91
 8008e5c:	08008e91 	.word	0x08008e91
 8008e60:	08008e91 	.word	0x08008e91
 8008e64:	08008e91 	.word	0x08008e91
 8008e68:	08008e91 	.word	0x08008e91
 8008e6c:	08008e91 	.word	0x08008e91
 8008e70:	08008e91 	.word	0x08008e91
 8008e74:	08008e91 	.word	0x08008e91
 8008e78:	08008e91 	.word	0x08008e91
 8008e7c:	08008e91 	.word	0x08008e91
 8008e80:	08008e91 	.word	0x08008e91
 8008e84:	08008e91 	.word	0x08008e91
 8008e88:	08008e91 	.word	0x08008e91
 8008e8c:	08008e91 	.word	0x08008e91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e90:	bf00      	nop
  }

  return (USBD_OK);
 8008e92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	4805      	ldr	r0, [pc, #20]	; (8008ec4 <CDC_Receive_FS+0x24>)
 8008eae:	f7fe fdea 	bl	8007a86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008eb2:	4804      	ldr	r0, [pc, #16]	; (8008ec4 <CDC_Receive_FS+0x24>)
 8008eb4:	f7fe fe00 	bl	8007ab8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008eb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200002ec 	.word	0x200002ec

08008ec8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6039      	str	r1, [r7, #0]
 8008ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2212      	movs	r2, #18
 8008efc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008efe:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	20000150 	.word	0x20000150

08008f10 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	6039      	str	r1, [r7, #0]
 8008f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	2204      	movs	r2, #4
 8008f20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f22:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	20000164 	.word	0x20000164

08008f34 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	6039      	str	r1, [r7, #0]
 8008f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	4907      	ldr	r1, [pc, #28]	; (8008f68 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008f4a:	4808      	ldr	r0, [pc, #32]	; (8008f6c <USBD_CDC_ProductStrDescriptor+0x38>)
 8008f4c:	f7ff fe1d 	bl	8008b8a <USBD_GetString>
 8008f50:	e004      	b.n	8008f5c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4904      	ldr	r1, [pc, #16]	; (8008f68 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008f56:	4805      	ldr	r0, [pc, #20]	; (8008f6c <USBD_CDC_ProductStrDescriptor+0x38>)
 8008f58:	f7ff fe17 	bl	8008b8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f5c:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20000dbc 	.word	0x20000dbc
 8008f6c:	08009784 	.word	0x08009784

08008f70 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	4904      	ldr	r1, [pc, #16]	; (8008f90 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008f80:	4804      	ldr	r0, [pc, #16]	; (8008f94 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008f82:	f7ff fe02 	bl	8008b8a <USBD_GetString>
  return USBD_StrDesc;
 8008f86:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20000dbc 	.word	0x20000dbc
 8008f94:	0800979c 	.word	0x0800979c

08008f98 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	221a      	movs	r2, #26
 8008fa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008faa:	f000 f843 	bl	8009034 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008fae:	4b02      	ldr	r3, [pc, #8]	; (8008fb8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000168 	.word	0x20000168

08008fbc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d105      	bne.n	8008fda <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	4907      	ldr	r1, [pc, #28]	; (8008ff0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008fd2:	4808      	ldr	r0, [pc, #32]	; (8008ff4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008fd4:	f7ff fdd9 	bl	8008b8a <USBD_GetString>
 8008fd8:	e004      	b.n	8008fe4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	4904      	ldr	r1, [pc, #16]	; (8008ff0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008fde:	4805      	ldr	r0, [pc, #20]	; (8008ff4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008fe0:	f7ff fdd3 	bl	8008b8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe4:	4b02      	ldr	r3, [pc, #8]	; (8008ff0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000dbc 	.word	0x20000dbc
 8008ff4:	080097b0 	.word	0x080097b0

08008ff8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	6039      	str	r1, [r7, #0]
 8009002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d105      	bne.n	8009016 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	4907      	ldr	r1, [pc, #28]	; (800902c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800900e:	4808      	ldr	r0, [pc, #32]	; (8009030 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009010:	f7ff fdbb 	bl	8008b8a <USBD_GetString>
 8009014:	e004      	b.n	8009020 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	4904      	ldr	r1, [pc, #16]	; (800902c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800901a:	4805      	ldr	r0, [pc, #20]	; (8009030 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800901c:	f7ff fdb5 	bl	8008b8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009020:	4b02      	ldr	r3, [pc, #8]	; (800902c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000dbc 	.word	0x20000dbc
 8009030:	080097bc 	.word	0x080097bc

08009034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800903a:	4b0f      	ldr	r3, [pc, #60]	; (8009078 <Get_SerialNum+0x44>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009040:	4b0e      	ldr	r3, [pc, #56]	; (800907c <Get_SerialNum+0x48>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009046:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <Get_SerialNum+0x4c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800905a:	2208      	movs	r2, #8
 800905c:	4909      	ldr	r1, [pc, #36]	; (8009084 <Get_SerialNum+0x50>)
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 f814 	bl	800908c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009064:	2204      	movs	r2, #4
 8009066:	4908      	ldr	r1, [pc, #32]	; (8009088 <Get_SerialNum+0x54>)
 8009068:	68b8      	ldr	r0, [r7, #8]
 800906a:	f000 f80f 	bl	800908c <IntToUnicode>
  }
}
 800906e:	bf00      	nop
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	1fff7590 	.word	0x1fff7590
 800907c:	1fff7594 	.word	0x1fff7594
 8009080:	1fff7598 	.word	0x1fff7598
 8009084:	2000016a 	.word	0x2000016a
 8009088:	2000017a 	.word	0x2000017a

0800908c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	4613      	mov	r3, r2
 8009098:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800909e:	2300      	movs	r3, #0
 80090a0:	75fb      	strb	r3, [r7, #23]
 80090a2:	e027      	b.n	80090f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	0f1b      	lsrs	r3, r3, #28
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d80b      	bhi.n	80090c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	0f1b      	lsrs	r3, r3, #28
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	4619      	mov	r1, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	440b      	add	r3, r1
 80090bc:	3230      	adds	r2, #48	; 0x30
 80090be:	b2d2      	uxtb	r2, r2
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e00a      	b.n	80090da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	0f1b      	lsrs	r3, r3, #28
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	4619      	mov	r1, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	440b      	add	r3, r1
 80090d4:	3237      	adds	r2, #55	; 0x37
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	3301      	adds	r3, #1
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	4413      	add	r3, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	3301      	adds	r3, #1
 80090f2:	75fb      	strb	r3, [r7, #23]
 80090f4:	7dfa      	ldrb	r2, [r7, #23]
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d3d3      	bcc.n	80090a4 <IntToUnicode+0x18>
  }
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
	...

0800910c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b094      	sub	sp, #80	; 0x50
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009114:	f107 030c 	add.w	r3, r7, #12
 8009118:	2244      	movs	r2, #68	; 0x44
 800911a:	2100      	movs	r1, #0
 800911c:	4618      	mov	r0, r3
 800911e:	f000 faf9 	bl	8009714 <memset>
  if(pcdHandle->Instance==USB)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a15      	ldr	r2, [pc, #84]	; (800917c <HAL_PCD_MspInit+0x70>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d122      	bne.n	8009172 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800912c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009130:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009132:	2300      	movs	r3, #0
 8009134:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009136:	f107 030c 	add.w	r3, r7, #12
 800913a:	4618      	mov	r0, r3
 800913c:	f7fa fc78 	bl	8003a30 <HAL_RCCEx_PeriphCLKConfig>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009146:	f7f7 f989 	bl	800045c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800914a:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <HAL_PCD_MspInit+0x74>)
 800914c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914e:	4a0c      	ldr	r2, [pc, #48]	; (8009180 <HAL_PCD_MspInit+0x74>)
 8009150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009154:	6593      	str	r3, [r2, #88]	; 0x58
 8009156:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <HAL_PCD_MspInit+0x74>)
 8009158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800915a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800915e:	60bb      	str	r3, [r7, #8]
 8009160:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009162:	2200      	movs	r2, #0
 8009164:	2100      	movs	r1, #0
 8009166:	2014      	movs	r0, #20
 8009168:	f7f7 fdfb 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800916c:	2014      	movs	r0, #20
 800916e:	f7f7 fe12 	bl	8000d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009172:	bf00      	nop
 8009174:	3750      	adds	r7, #80	; 0x50
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	40005c00 	.word	0x40005c00
 8009180:	40021000 	.word	0x40021000

08009184 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f7fe fd58 	bl	8007c50 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	440b      	add	r3, r1
 80091c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	4619      	mov	r1, r3
 80091d2:	f7fe fd92 	bl	8007cfa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80091f0:	78fa      	ldrb	r2, [r7, #3]
 80091f2:	6879      	ldr	r1, [r7, #4]
 80091f4:	4613      	mov	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	440b      	add	r3, r1
 80091fe:	3324      	adds	r3, #36	; 0x24
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	78fb      	ldrb	r3, [r7, #3]
 8009204:	4619      	mov	r1, r3
 8009206:	f7fe fddb 	bl	8007dc0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe feef 	bl	8008004 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009236:	2301      	movs	r3, #1
 8009238:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	795b      	ldrb	r3, [r3, #5]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d001      	beq.n	8009246 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009242:	f7f7 f90b 	bl	800045c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800924c:	7bfa      	ldrb	r2, [r7, #15]
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f7fe fe99 	bl	8007f88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe fe45 	bl	8007eec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009262:	bf00      	nop
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fe94 	bl	8007fa8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7a5b      	ldrb	r3, [r3, #9]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009288:	4b04      	ldr	r3, [pc, #16]	; (800929c <HAL_PCD_SuspendCallback+0x30>)
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	4a03      	ldr	r2, [pc, #12]	; (800929c <HAL_PCD_SuspendCallback+0x30>)
 800928e:	f043 0306 	orr.w	r3, r3, #6
 8009292:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	e000ed00 	.word	0xe000ed00

080092a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	7a5b      	ldrb	r3, [r3, #9]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d007      	beq.n	80092c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092b0:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <HAL_PCD_ResumeCallback+0x34>)
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	4a07      	ldr	r2, [pc, #28]	; (80092d4 <HAL_PCD_ResumeCallback+0x34>)
 80092b6:	f023 0306 	bic.w	r3, r3, #6
 80092ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80092bc:	f000 f9f8 	bl	80096b0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fe84 	bl	8007fd4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	e000ed00 	.word	0xe000ed00

080092d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80092e0:	4a2b      	ldr	r2, [pc, #172]	; (8009390 <USBD_LL_Init+0xb8>)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a29      	ldr	r2, [pc, #164]	; (8009390 <USBD_LL_Init+0xb8>)
 80092ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80092f0:	4b27      	ldr	r3, [pc, #156]	; (8009390 <USBD_LL_Init+0xb8>)
 80092f2:	4a28      	ldr	r2, [pc, #160]	; (8009394 <USBD_LL_Init+0xbc>)
 80092f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092f6:	4b26      	ldr	r3, [pc, #152]	; (8009390 <USBD_LL_Init+0xb8>)
 80092f8:	2208      	movs	r2, #8
 80092fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092fc:	4b24      	ldr	r3, [pc, #144]	; (8009390 <USBD_LL_Init+0xb8>)
 80092fe:	2202      	movs	r2, #2
 8009300:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009302:	4b23      	ldr	r3, [pc, #140]	; (8009390 <USBD_LL_Init+0xb8>)
 8009304:	2202      	movs	r2, #2
 8009306:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009308:	4b21      	ldr	r3, [pc, #132]	; (8009390 <USBD_LL_Init+0xb8>)
 800930a:	2200      	movs	r2, #0
 800930c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800930e:	4b20      	ldr	r3, [pc, #128]	; (8009390 <USBD_LL_Init+0xb8>)
 8009310:	2200      	movs	r2, #0
 8009312:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009314:	4b1e      	ldr	r3, [pc, #120]	; (8009390 <USBD_LL_Init+0xb8>)
 8009316:	2200      	movs	r2, #0
 8009318:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800931a:	4b1d      	ldr	r3, [pc, #116]	; (8009390 <USBD_LL_Init+0xb8>)
 800931c:	2200      	movs	r2, #0
 800931e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009320:	481b      	ldr	r0, [pc, #108]	; (8009390 <USBD_LL_Init+0xb8>)
 8009322:	f7f8 f8a7 	bl	8001474 <HAL_PCD_Init>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800932c:	f7f7 f896 	bl	800045c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009336:	2318      	movs	r3, #24
 8009338:	2200      	movs	r2, #0
 800933a:	2100      	movs	r1, #0
 800933c:	f7f9 fd61 	bl	8002e02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009346:	2358      	movs	r3, #88	; 0x58
 8009348:	2200      	movs	r2, #0
 800934a:	2180      	movs	r1, #128	; 0x80
 800934c:	f7f9 fd59 	bl	8002e02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009356:	23c0      	movs	r3, #192	; 0xc0
 8009358:	2200      	movs	r2, #0
 800935a:	2181      	movs	r1, #129	; 0x81
 800935c:	f7f9 fd51 	bl	8002e02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009366:	f44f 7388 	mov.w	r3, #272	; 0x110
 800936a:	2200      	movs	r2, #0
 800936c:	2101      	movs	r1, #1
 800936e:	f7f9 fd48 	bl	8002e02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800937c:	2200      	movs	r2, #0
 800937e:	2182      	movs	r1, #130	; 0x82
 8009380:	f7f9 fd3f 	bl	8002e02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20000fbc 	.word	0x20000fbc
 8009394:	40005c00 	.word	0x40005c00

08009398 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7f8 f92e 	bl	8001610 <HAL_PCD_Start>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f97e 	bl	80096bc <USBD_Get_USB_Status>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	4608      	mov	r0, r1
 80093d8:	4611      	mov	r1, r2
 80093da:	461a      	mov	r2, r3
 80093dc:	4603      	mov	r3, r0
 80093de:	70fb      	strb	r3, [r7, #3]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70bb      	strb	r3, [r7, #2]
 80093e4:	4613      	mov	r3, r2
 80093e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093f6:	78bb      	ldrb	r3, [r7, #2]
 80093f8:	883a      	ldrh	r2, [r7, #0]
 80093fa:	78f9      	ldrb	r1, [r7, #3]
 80093fc:	f7f8 fa75 	bl	80018ea <HAL_PCD_EP_Open>
 8009400:	4603      	mov	r3, r0
 8009402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f958 	bl	80096bc <USBD_Get_USB_Status>
 800940c:	4603      	mov	r3, r0
 800940e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009410:	7bbb      	ldrb	r3, [r7, #14]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f7f8 fab3 	bl	80019a4 <HAL_PCD_EP_Close>
 800943e:	4603      	mov	r3, r0
 8009440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f939 	bl	80096bc <USBD_Get_USB_Status>
 800944a:	4603      	mov	r3, r0
 800944c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	4611      	mov	r1, r2
 8009476:	4618      	mov	r0, r3
 8009478:	f7f8 fb5c 	bl	8001b34 <HAL_PCD_EP_SetStall>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009480:	7bfb      	ldrb	r3, [r7, #15]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 f91a 	bl	80096bc <USBD_Get_USB_Status>
 8009488:	4603      	mov	r3, r0
 800948a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948c:	7bbb      	ldrb	r3, [r7, #14]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	460b      	mov	r3, r1
 80094a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	4611      	mov	r1, r2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7f8 fb8f 	bl	8001bd8 <HAL_PCD_EP_ClrStall>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 f8fb 	bl	80096bc <USBD_Get_USB_Status>
 80094c6:	4603      	mov	r3, r0
 80094c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da0b      	bge.n	8009508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094f6:	68f9      	ldr	r1, [r7, #12]
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	440b      	add	r3, r1
 8009502:	3312      	adds	r3, #18
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	e00b      	b.n	8009520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800950e:	68f9      	ldr	r1, [r7, #12]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	440b      	add	r3, r1
 800951a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800951e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	4611      	mov	r1, r2
 800954a:	4618      	mov	r0, r3
 800954c:	f7f8 f9a9 	bl	80018a2 <HAL_PCD_SetAddress>
 8009550:	4603      	mov	r3, r0
 8009552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f8b0 	bl	80096bc <USBD_Get_USB_Status>
 800955c:	4603      	mov	r3, r0
 800955e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009560:	7bbb      	ldrb	r3, [r7, #14]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b086      	sub	sp, #24
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	603b      	str	r3, [r7, #0]
 8009576:	460b      	mov	r3, r1
 8009578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009588:	7af9      	ldrb	r1, [r7, #11]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	f7f8 fa9a 	bl	8001ac6 <HAL_PCD_EP_Transmit>
 8009592:	4603      	mov	r3, r0
 8009594:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	4618      	mov	r0, r3
 800959a:	f000 f88f 	bl	80096bc <USBD_Get_USB_Status>
 800959e:	4603      	mov	r3, r0
 80095a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	607a      	str	r2, [r7, #4]
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	460b      	mov	r3, r1
 80095ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095ca:	7af9      	ldrb	r1, [r7, #11]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	f7f8 fa30 	bl	8001a34 <HAL_PCD_EP_Receive>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f86e 	bl	80096bc <USBD_Get_USB_Status>
 80095e0:	4603      	mov	r3, r0
 80095e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009600:	78fa      	ldrb	r2, [r7, #3]
 8009602:	4611      	mov	r1, r2
 8009604:	4618      	mov	r0, r3
 8009606:	f7f8 fa46 	bl	8001a96 <HAL_PCD_EP_GetRxCount>
 800960a:	4603      	mov	r3, r0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d002      	beq.n	800962c <HAL_PCDEx_LPM_Callback+0x18>
 8009626:	2b01      	cmp	r3, #1
 8009628:	d013      	beq.n	8009652 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800962a:	e023      	b.n	8009674 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	7a5b      	ldrb	r3, [r3, #9]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d007      	beq.n	8009644 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009634:	f000 f83c 	bl	80096b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009638:	4b10      	ldr	r3, [pc, #64]	; (800967c <HAL_PCDEx_LPM_Callback+0x68>)
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	4a0f      	ldr	r2, [pc, #60]	; (800967c <HAL_PCDEx_LPM_Callback+0x68>)
 800963e:	f023 0306 	bic.w	r3, r3, #6
 8009642:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe fcc2 	bl	8007fd4 <USBD_LL_Resume>
    break;
 8009650:	e010      	b.n	8009674 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fca5 	bl	8007fa8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	7a5b      	ldrb	r3, [r3, #9]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d005      	beq.n	8009672 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009666:	4b05      	ldr	r3, [pc, #20]	; (800967c <HAL_PCDEx_LPM_Callback+0x68>)
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	4a04      	ldr	r2, [pc, #16]	; (800967c <HAL_PCDEx_LPM_Callback+0x68>)
 800966c:	f043 0306 	orr.w	r3, r3, #6
 8009670:	6113      	str	r3, [r2, #16]
    break;
 8009672:	bf00      	nop
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	e000ed00 	.word	0xe000ed00

08009680 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009688:	4b03      	ldr	r3, [pc, #12]	; (8009698 <USBD_static_malloc+0x18>)
}
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20001298 	.word	0x20001298

0800969c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]

}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80096b4:	f7f6 fe87 	bl	80003c6 <SystemClock_Config>
}
 80096b8:	bf00      	nop
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d817      	bhi.n	8009700 <USBD_Get_USB_Status+0x44>
 80096d0:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <USBD_Get_USB_Status+0x1c>)
 80096d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d6:	bf00      	nop
 80096d8:	080096e9 	.word	0x080096e9
 80096dc:	080096ef 	.word	0x080096ef
 80096e0:	080096f5 	.word	0x080096f5
 80096e4:	080096fb 	.word	0x080096fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
    break;
 80096ec:	e00b      	b.n	8009706 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096ee:	2303      	movs	r3, #3
 80096f0:	73fb      	strb	r3, [r7, #15]
    break;
 80096f2:	e008      	b.n	8009706 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096f4:	2301      	movs	r3, #1
 80096f6:	73fb      	strb	r3, [r7, #15]
    break;
 80096f8:	e005      	b.n	8009706 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096fa:	2303      	movs	r3, #3
 80096fc:	73fb      	strb	r3, [r7, #15]
    break;
 80096fe:	e002      	b.n	8009706 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009700:	2303      	movs	r3, #3
 8009702:	73fb      	strb	r3, [r7, #15]
    break;
 8009704:	bf00      	nop
  }
  return usb_status;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <memset>:
 8009714:	4402      	add	r2, r0
 8009716:	4603      	mov	r3, r0
 8009718:	4293      	cmp	r3, r2
 800971a:	d100      	bne.n	800971e <memset+0xa>
 800971c:	4770      	bx	lr
 800971e:	f803 1b01 	strb.w	r1, [r3], #1
 8009722:	e7f9      	b.n	8009718 <memset+0x4>

08009724 <__libc_init_array>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	4d0d      	ldr	r5, [pc, #52]	; (800975c <__libc_init_array+0x38>)
 8009728:	4c0d      	ldr	r4, [pc, #52]	; (8009760 <__libc_init_array+0x3c>)
 800972a:	1b64      	subs	r4, r4, r5
 800972c:	10a4      	asrs	r4, r4, #2
 800972e:	2600      	movs	r6, #0
 8009730:	42a6      	cmp	r6, r4
 8009732:	d109      	bne.n	8009748 <__libc_init_array+0x24>
 8009734:	4d0b      	ldr	r5, [pc, #44]	; (8009764 <__libc_init_array+0x40>)
 8009736:	4c0c      	ldr	r4, [pc, #48]	; (8009768 <__libc_init_array+0x44>)
 8009738:	f000 f818 	bl	800976c <_init>
 800973c:	1b64      	subs	r4, r4, r5
 800973e:	10a4      	asrs	r4, r4, #2
 8009740:	2600      	movs	r6, #0
 8009742:	42a6      	cmp	r6, r4
 8009744:	d105      	bne.n	8009752 <__libc_init_array+0x2e>
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	f855 3b04 	ldr.w	r3, [r5], #4
 800974c:	4798      	blx	r3
 800974e:	3601      	adds	r6, #1
 8009750:	e7ee      	b.n	8009730 <__libc_init_array+0xc>
 8009752:	f855 3b04 	ldr.w	r3, [r5], #4
 8009756:	4798      	blx	r3
 8009758:	3601      	adds	r6, #1
 800975a:	e7f2      	b.n	8009742 <__libc_init_array+0x1e>
 800975c:	080097dc 	.word	0x080097dc
 8009760:	080097dc 	.word	0x080097dc
 8009764:	080097dc 	.word	0x080097dc
 8009768:	080097e0 	.word	0x080097e0

0800976c <_init>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	bf00      	nop
 8009770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009772:	bc08      	pop	{r3}
 8009774:	469e      	mov	lr, r3
 8009776:	4770      	bx	lr

08009778 <_fini>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	bf00      	nop
 800977c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977e:	bc08      	pop	{r3}
 8009780:	469e      	mov	lr, r3
 8009782:	4770      	bx	lr
